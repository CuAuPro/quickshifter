
FW_Quickshifter_STM32F030K6T6_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800484c  0800484c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800484c  0800484c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08004860  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004860  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a773  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af0  00000000  00000000  0002a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7c3  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c366  00000000  00000000  0003cdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e1d1  00000000  00000000  00049151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e4  00000000  00000000  000a7378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047c4 	.word	0x080047c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080047c4 	.word	0x080047c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e05      	subs	r5, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f001 fa1d 	bl	8001664 <__clzsi2>
 800022a:	239e      	movs	r3, #158	; 0x9e
 800022c:	0004      	movs	r4, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	; 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	dd01      	ble.n	800023c <__aeabi_ui2f+0x1c>
 8000238:	3c08      	subs	r4, #8
 800023a:	40a5      	lsls	r5, r4
 800023c:	026d      	lsls	r5, r5, #9
 800023e:	0a6d      	lsrs	r5, r5, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2500      	movs	r5, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4328      	orrs	r0, r5
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	; 0x99
 8000250:	dd09      	ble.n	8000266 <__aeabi_ui2f+0x46>
 8000252:	0002      	movs	r2, r0
 8000254:	0029      	movs	r1, r5
 8000256:	321b      	adds	r2, #27
 8000258:	4091      	lsls	r1, r2
 800025a:	1e4a      	subs	r2, r1, #1
 800025c:	4191      	sbcs	r1, r2
 800025e:	2205      	movs	r2, #5
 8000260:	1a12      	subs	r2, r2, r0
 8000262:	40d5      	lsrs	r5, r2
 8000264:	430d      	orrs	r5, r1
 8000266:	2c05      	cmp	r4, #5
 8000268:	dd01      	ble.n	800026e <__aeabi_ui2f+0x4e>
 800026a:	1f62      	subs	r2, r4, #5
 800026c:	4095      	lsls	r5, r2
 800026e:	0029      	movs	r1, r5
 8000270:	4e08      	ldr	r6, [pc, #32]	; (8000294 <__aeabi_ui2f+0x74>)
 8000272:	4031      	ands	r1, r6
 8000274:	076a      	lsls	r2, r5, #29
 8000276:	d009      	beq.n	800028c <__aeabi_ui2f+0x6c>
 8000278:	200f      	movs	r0, #15
 800027a:	4028      	ands	r0, r5
 800027c:	2804      	cmp	r0, #4
 800027e:	d005      	beq.n	800028c <__aeabi_ui2f+0x6c>
 8000280:	3104      	adds	r1, #4
 8000282:	014a      	lsls	r2, r1, #5
 8000284:	d502      	bpl.n	800028c <__aeabi_ui2f+0x6c>
 8000286:	239f      	movs	r3, #159	; 0x9f
 8000288:	4031      	ands	r1, r6
 800028a:	1b1b      	subs	r3, r3, r4
 800028c:	0189      	lsls	r1, r1, #6
 800028e:	0a4d      	lsrs	r5, r1, #9
 8000290:	b2d8      	uxtb	r0, r3
 8000292:	e7d9      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000294:	fbffffff 	.word	0xfbffffff

08000298 <__aeabi_dadd>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	464f      	mov	r7, r9
 800029c:	46d6      	mov	lr, sl
 800029e:	4646      	mov	r6, r8
 80002a0:	000d      	movs	r5, r1
 80002a2:	0001      	movs	r1, r0
 80002a4:	0018      	movs	r0, r3
 80002a6:	b5c0      	push	{r6, r7, lr}
 80002a8:	0017      	movs	r7, r2
 80002aa:	032b      	lsls	r3, r5, #12
 80002ac:	0a5a      	lsrs	r2, r3, #9
 80002ae:	0f4b      	lsrs	r3, r1, #29
 80002b0:	4313      	orrs	r3, r2
 80002b2:	00ca      	lsls	r2, r1, #3
 80002b4:	4691      	mov	r9, r2
 80002b6:	0302      	lsls	r2, r0, #12
 80002b8:	006e      	lsls	r6, r5, #1
 80002ba:	0041      	lsls	r1, r0, #1
 80002bc:	0a52      	lsrs	r2, r2, #9
 80002be:	0fec      	lsrs	r4, r5, #31
 80002c0:	0f7d      	lsrs	r5, r7, #29
 80002c2:	4315      	orrs	r5, r2
 80002c4:	0d76      	lsrs	r6, r6, #21
 80002c6:	0d49      	lsrs	r1, r1, #21
 80002c8:	0fc0      	lsrs	r0, r0, #31
 80002ca:	4682      	mov	sl, r0
 80002cc:	46ac      	mov	ip, r5
 80002ce:	00ff      	lsls	r7, r7, #3
 80002d0:	1a72      	subs	r2, r6, r1
 80002d2:	4284      	cmp	r4, r0
 80002d4:	d100      	bne.n	80002d8 <__aeabi_dadd+0x40>
 80002d6:	e098      	b.n	800040a <__aeabi_dadd+0x172>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	dc00      	bgt.n	80002de <__aeabi_dadd+0x46>
 80002dc:	e081      	b.n	80003e2 <__aeabi_dadd+0x14a>
 80002de:	2900      	cmp	r1, #0
 80002e0:	d100      	bne.n	80002e4 <__aeabi_dadd+0x4c>
 80002e2:	e0b6      	b.n	8000452 <__aeabi_dadd+0x1ba>
 80002e4:	49c9      	ldr	r1, [pc, #804]	; (800060c <__aeabi_dadd+0x374>)
 80002e6:	428e      	cmp	r6, r1
 80002e8:	d100      	bne.n	80002ec <__aeabi_dadd+0x54>
 80002ea:	e172      	b.n	80005d2 <__aeabi_dadd+0x33a>
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	0028      	movs	r0, r5
 80002f0:	0409      	lsls	r1, r1, #16
 80002f2:	4308      	orrs	r0, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	2a38      	cmp	r2, #56	; 0x38
 80002f8:	dd00      	ble.n	80002fc <__aeabi_dadd+0x64>
 80002fa:	e15e      	b.n	80005ba <__aeabi_dadd+0x322>
 80002fc:	2a1f      	cmp	r2, #31
 80002fe:	dd00      	ble.n	8000302 <__aeabi_dadd+0x6a>
 8000300:	e1ee      	b.n	80006e0 <__aeabi_dadd+0x448>
 8000302:	2020      	movs	r0, #32
 8000304:	0039      	movs	r1, r7
 8000306:	4665      	mov	r5, ip
 8000308:	1a80      	subs	r0, r0, r2
 800030a:	4087      	lsls	r7, r0
 800030c:	40d1      	lsrs	r1, r2
 800030e:	4085      	lsls	r5, r0
 8000310:	430d      	orrs	r5, r1
 8000312:	0039      	movs	r1, r7
 8000314:	1e4f      	subs	r7, r1, #1
 8000316:	41b9      	sbcs	r1, r7
 8000318:	4667      	mov	r7, ip
 800031a:	40d7      	lsrs	r7, r2
 800031c:	4329      	orrs	r1, r5
 800031e:	1bdb      	subs	r3, r3, r7
 8000320:	464a      	mov	r2, r9
 8000322:	1a55      	subs	r5, r2, r1
 8000324:	45a9      	cmp	r9, r5
 8000326:	4189      	sbcs	r1, r1
 8000328:	4249      	negs	r1, r1
 800032a:	1a5b      	subs	r3, r3, r1
 800032c:	4698      	mov	r8, r3
 800032e:	4643      	mov	r3, r8
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	d400      	bmi.n	8000336 <__aeabi_dadd+0x9e>
 8000334:	e0cc      	b.n	80004d0 <__aeabi_dadd+0x238>
 8000336:	4643      	mov	r3, r8
 8000338:	025b      	lsls	r3, r3, #9
 800033a:	0a5b      	lsrs	r3, r3, #9
 800033c:	4698      	mov	r8, r3
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d100      	bne.n	8000346 <__aeabi_dadd+0xae>
 8000344:	e12c      	b.n	80005a0 <__aeabi_dadd+0x308>
 8000346:	4640      	mov	r0, r8
 8000348:	f001 f98c 	bl	8001664 <__clzsi2>
 800034c:	0001      	movs	r1, r0
 800034e:	3908      	subs	r1, #8
 8000350:	2220      	movs	r2, #32
 8000352:	0028      	movs	r0, r5
 8000354:	4643      	mov	r3, r8
 8000356:	1a52      	subs	r2, r2, r1
 8000358:	408b      	lsls	r3, r1
 800035a:	40d0      	lsrs	r0, r2
 800035c:	408d      	lsls	r5, r1
 800035e:	4303      	orrs	r3, r0
 8000360:	428e      	cmp	r6, r1
 8000362:	dd00      	ble.n	8000366 <__aeabi_dadd+0xce>
 8000364:	e117      	b.n	8000596 <__aeabi_dadd+0x2fe>
 8000366:	1b8e      	subs	r6, r1, r6
 8000368:	1c72      	adds	r2, r6, #1
 800036a:	2a1f      	cmp	r2, #31
 800036c:	dd00      	ble.n	8000370 <__aeabi_dadd+0xd8>
 800036e:	e1a7      	b.n	80006c0 <__aeabi_dadd+0x428>
 8000370:	2120      	movs	r1, #32
 8000372:	0018      	movs	r0, r3
 8000374:	002e      	movs	r6, r5
 8000376:	1a89      	subs	r1, r1, r2
 8000378:	408d      	lsls	r5, r1
 800037a:	4088      	lsls	r0, r1
 800037c:	40d6      	lsrs	r6, r2
 800037e:	40d3      	lsrs	r3, r2
 8000380:	1e69      	subs	r1, r5, #1
 8000382:	418d      	sbcs	r5, r1
 8000384:	4330      	orrs	r0, r6
 8000386:	4698      	mov	r8, r3
 8000388:	2600      	movs	r6, #0
 800038a:	4305      	orrs	r5, r0
 800038c:	076b      	lsls	r3, r5, #29
 800038e:	d009      	beq.n	80003a4 <__aeabi_dadd+0x10c>
 8000390:	230f      	movs	r3, #15
 8000392:	402b      	ands	r3, r5
 8000394:	2b04      	cmp	r3, #4
 8000396:	d005      	beq.n	80003a4 <__aeabi_dadd+0x10c>
 8000398:	1d2b      	adds	r3, r5, #4
 800039a:	42ab      	cmp	r3, r5
 800039c:	41ad      	sbcs	r5, r5
 800039e:	426d      	negs	r5, r5
 80003a0:	44a8      	add	r8, r5
 80003a2:	001d      	movs	r5, r3
 80003a4:	4643      	mov	r3, r8
 80003a6:	021b      	lsls	r3, r3, #8
 80003a8:	d400      	bmi.n	80003ac <__aeabi_dadd+0x114>
 80003aa:	e094      	b.n	80004d6 <__aeabi_dadd+0x23e>
 80003ac:	4b97      	ldr	r3, [pc, #604]	; (800060c <__aeabi_dadd+0x374>)
 80003ae:	1c72      	adds	r2, r6, #1
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d100      	bne.n	80003b6 <__aeabi_dadd+0x11e>
 80003b4:	e09d      	b.n	80004f2 <__aeabi_dadd+0x25a>
 80003b6:	4641      	mov	r1, r8
 80003b8:	4b95      	ldr	r3, [pc, #596]	; (8000610 <__aeabi_dadd+0x378>)
 80003ba:	08ed      	lsrs	r5, r5, #3
 80003bc:	4019      	ands	r1, r3
 80003be:	000b      	movs	r3, r1
 80003c0:	0552      	lsls	r2, r2, #21
 80003c2:	0749      	lsls	r1, r1, #29
 80003c4:	025b      	lsls	r3, r3, #9
 80003c6:	4329      	orrs	r1, r5
 80003c8:	0b1b      	lsrs	r3, r3, #12
 80003ca:	0d52      	lsrs	r2, r2, #21
 80003cc:	0512      	lsls	r2, r2, #20
 80003ce:	4313      	orrs	r3, r2
 80003d0:	07e4      	lsls	r4, r4, #31
 80003d2:	4323      	orrs	r3, r4
 80003d4:	0008      	movs	r0, r1
 80003d6:	0019      	movs	r1, r3
 80003d8:	bce0      	pop	{r5, r6, r7}
 80003da:	46ba      	mov	sl, r7
 80003dc:	46b1      	mov	r9, r6
 80003de:	46a8      	mov	r8, r5
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	d043      	beq.n	800046e <__aeabi_dadd+0x1d6>
 80003e6:	1b8a      	subs	r2, r1, r6
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d000      	beq.n	80003ee <__aeabi_dadd+0x156>
 80003ec:	e12a      	b.n	8000644 <__aeabi_dadd+0x3ac>
 80003ee:	464c      	mov	r4, r9
 80003f0:	431c      	orrs	r4, r3
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dadd+0x15e>
 80003f4:	e1d1      	b.n	800079a <__aeabi_dadd+0x502>
 80003f6:	1e54      	subs	r4, r2, #1
 80003f8:	2a01      	cmp	r2, #1
 80003fa:	d100      	bne.n	80003fe <__aeabi_dadd+0x166>
 80003fc:	e21f      	b.n	800083e <__aeabi_dadd+0x5a6>
 80003fe:	4d83      	ldr	r5, [pc, #524]	; (800060c <__aeabi_dadd+0x374>)
 8000400:	42aa      	cmp	r2, r5
 8000402:	d100      	bne.n	8000406 <__aeabi_dadd+0x16e>
 8000404:	e272      	b.n	80008ec <__aeabi_dadd+0x654>
 8000406:	0022      	movs	r2, r4
 8000408:	e123      	b.n	8000652 <__aeabi_dadd+0x3ba>
 800040a:	2a00      	cmp	r2, #0
 800040c:	dc00      	bgt.n	8000410 <__aeabi_dadd+0x178>
 800040e:	e098      	b.n	8000542 <__aeabi_dadd+0x2aa>
 8000410:	2900      	cmp	r1, #0
 8000412:	d042      	beq.n	800049a <__aeabi_dadd+0x202>
 8000414:	497d      	ldr	r1, [pc, #500]	; (800060c <__aeabi_dadd+0x374>)
 8000416:	428e      	cmp	r6, r1
 8000418:	d100      	bne.n	800041c <__aeabi_dadd+0x184>
 800041a:	e0da      	b.n	80005d2 <__aeabi_dadd+0x33a>
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0028      	movs	r0, r5
 8000420:	0409      	lsls	r1, r1, #16
 8000422:	4308      	orrs	r0, r1
 8000424:	4684      	mov	ip, r0
 8000426:	2a38      	cmp	r2, #56	; 0x38
 8000428:	dd00      	ble.n	800042c <__aeabi_dadd+0x194>
 800042a:	e129      	b.n	8000680 <__aeabi_dadd+0x3e8>
 800042c:	2a1f      	cmp	r2, #31
 800042e:	dc00      	bgt.n	8000432 <__aeabi_dadd+0x19a>
 8000430:	e187      	b.n	8000742 <__aeabi_dadd+0x4aa>
 8000432:	0011      	movs	r1, r2
 8000434:	4665      	mov	r5, ip
 8000436:	3920      	subs	r1, #32
 8000438:	40cd      	lsrs	r5, r1
 800043a:	2a20      	cmp	r2, #32
 800043c:	d004      	beq.n	8000448 <__aeabi_dadd+0x1b0>
 800043e:	2040      	movs	r0, #64	; 0x40
 8000440:	4661      	mov	r1, ip
 8000442:	1a82      	subs	r2, r0, r2
 8000444:	4091      	lsls	r1, r2
 8000446:	430f      	orrs	r7, r1
 8000448:	0039      	movs	r1, r7
 800044a:	1e4f      	subs	r7, r1, #1
 800044c:	41b9      	sbcs	r1, r7
 800044e:	430d      	orrs	r5, r1
 8000450:	e11b      	b.n	800068a <__aeabi_dadd+0x3f2>
 8000452:	0029      	movs	r1, r5
 8000454:	4339      	orrs	r1, r7
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x1c2>
 8000458:	e0b5      	b.n	80005c6 <__aeabi_dadd+0x32e>
 800045a:	1e51      	subs	r1, r2, #1
 800045c:	2a01      	cmp	r2, #1
 800045e:	d100      	bne.n	8000462 <__aeabi_dadd+0x1ca>
 8000460:	e1ab      	b.n	80007ba <__aeabi_dadd+0x522>
 8000462:	486a      	ldr	r0, [pc, #424]	; (800060c <__aeabi_dadd+0x374>)
 8000464:	4282      	cmp	r2, r0
 8000466:	d100      	bne.n	800046a <__aeabi_dadd+0x1d2>
 8000468:	e1b2      	b.n	80007d0 <__aeabi_dadd+0x538>
 800046a:	000a      	movs	r2, r1
 800046c:	e743      	b.n	80002f6 <__aeabi_dadd+0x5e>
 800046e:	4969      	ldr	r1, [pc, #420]	; (8000614 <__aeabi_dadd+0x37c>)
 8000470:	1c75      	adds	r5, r6, #1
 8000472:	420d      	tst	r5, r1
 8000474:	d000      	beq.n	8000478 <__aeabi_dadd+0x1e0>
 8000476:	e0cf      	b.n	8000618 <__aeabi_dadd+0x380>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d000      	beq.n	800047e <__aeabi_dadd+0x1e6>
 800047c:	e193      	b.n	80007a6 <__aeabi_dadd+0x50e>
 800047e:	4649      	mov	r1, r9
 8000480:	4319      	orrs	r1, r3
 8000482:	d100      	bne.n	8000486 <__aeabi_dadd+0x1ee>
 8000484:	e1d1      	b.n	800082a <__aeabi_dadd+0x592>
 8000486:	4661      	mov	r1, ip
 8000488:	4339      	orrs	r1, r7
 800048a:	d000      	beq.n	800048e <__aeabi_dadd+0x1f6>
 800048c:	e1e3      	b.n	8000856 <__aeabi_dadd+0x5be>
 800048e:	4649      	mov	r1, r9
 8000490:	0758      	lsls	r0, r3, #29
 8000492:	08c9      	lsrs	r1, r1, #3
 8000494:	4301      	orrs	r1, r0
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	e026      	b.n	80004e8 <__aeabi_dadd+0x250>
 800049a:	0029      	movs	r1, r5
 800049c:	4339      	orrs	r1, r7
 800049e:	d100      	bne.n	80004a2 <__aeabi_dadd+0x20a>
 80004a0:	e091      	b.n	80005c6 <__aeabi_dadd+0x32e>
 80004a2:	1e51      	subs	r1, r2, #1
 80004a4:	2a01      	cmp	r2, #1
 80004a6:	d005      	beq.n	80004b4 <__aeabi_dadd+0x21c>
 80004a8:	4858      	ldr	r0, [pc, #352]	; (800060c <__aeabi_dadd+0x374>)
 80004aa:	4282      	cmp	r2, r0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_dadd+0x218>
 80004ae:	e18f      	b.n	80007d0 <__aeabi_dadd+0x538>
 80004b0:	000a      	movs	r2, r1
 80004b2:	e7b8      	b.n	8000426 <__aeabi_dadd+0x18e>
 80004b4:	003d      	movs	r5, r7
 80004b6:	444d      	add	r5, r9
 80004b8:	454d      	cmp	r5, r9
 80004ba:	4189      	sbcs	r1, r1
 80004bc:	4463      	add	r3, ip
 80004be:	4698      	mov	r8, r3
 80004c0:	4249      	negs	r1, r1
 80004c2:	4488      	add	r8, r1
 80004c4:	4643      	mov	r3, r8
 80004c6:	2602      	movs	r6, #2
 80004c8:	021b      	lsls	r3, r3, #8
 80004ca:	d500      	bpl.n	80004ce <__aeabi_dadd+0x236>
 80004cc:	e0eb      	b.n	80006a6 <__aeabi_dadd+0x40e>
 80004ce:	3e01      	subs	r6, #1
 80004d0:	076b      	lsls	r3, r5, #29
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x23e>
 80004d4:	e75c      	b.n	8000390 <__aeabi_dadd+0xf8>
 80004d6:	4643      	mov	r3, r8
 80004d8:	08e9      	lsrs	r1, r5, #3
 80004da:	075a      	lsls	r2, r3, #29
 80004dc:	4311      	orrs	r1, r2
 80004de:	0032      	movs	r2, r6
 80004e0:	08db      	lsrs	r3, r3, #3
 80004e2:	484a      	ldr	r0, [pc, #296]	; (800060c <__aeabi_dadd+0x374>)
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d021      	beq.n	800052c <__aeabi_dadd+0x294>
 80004e8:	031b      	lsls	r3, r3, #12
 80004ea:	0552      	lsls	r2, r2, #21
 80004ec:	0b1b      	lsrs	r3, r3, #12
 80004ee:	0d52      	lsrs	r2, r2, #21
 80004f0:	e76c      	b.n	80003cc <__aeabi_dadd+0x134>
 80004f2:	2300      	movs	r3, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	e769      	b.n	80003cc <__aeabi_dadd+0x134>
 80004f8:	002a      	movs	r2, r5
 80004fa:	433a      	orrs	r2, r7
 80004fc:	d069      	beq.n	80005d2 <__aeabi_dadd+0x33a>
 80004fe:	464a      	mov	r2, r9
 8000500:	0758      	lsls	r0, r3, #29
 8000502:	08d1      	lsrs	r1, r2, #3
 8000504:	08da      	lsrs	r2, r3, #3
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	031b      	lsls	r3, r3, #12
 800050a:	4308      	orrs	r0, r1
 800050c:	421a      	tst	r2, r3
 800050e:	d007      	beq.n	8000520 <__aeabi_dadd+0x288>
 8000510:	0029      	movs	r1, r5
 8000512:	08ed      	lsrs	r5, r5, #3
 8000514:	421d      	tst	r5, r3
 8000516:	d103      	bne.n	8000520 <__aeabi_dadd+0x288>
 8000518:	002a      	movs	r2, r5
 800051a:	08ff      	lsrs	r7, r7, #3
 800051c:	0748      	lsls	r0, r1, #29
 800051e:	4338      	orrs	r0, r7
 8000520:	0f43      	lsrs	r3, r0, #29
 8000522:	00c1      	lsls	r1, r0, #3
 8000524:	075b      	lsls	r3, r3, #29
 8000526:	08c9      	lsrs	r1, r1, #3
 8000528:	4319      	orrs	r1, r3
 800052a:	0013      	movs	r3, r2
 800052c:	000a      	movs	r2, r1
 800052e:	431a      	orrs	r2, r3
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0x29c>
 8000532:	e213      	b.n	800095c <__aeabi_dadd+0x6c4>
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	0312      	lsls	r2, r2, #12
 8000538:	4313      	orrs	r3, r2
 800053a:	031b      	lsls	r3, r3, #12
 800053c:	4a33      	ldr	r2, [pc, #204]	; (800060c <__aeabi_dadd+0x374>)
 800053e:	0b1b      	lsrs	r3, r3, #12
 8000540:	e744      	b.n	80003cc <__aeabi_dadd+0x134>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d04b      	beq.n	80005de <__aeabi_dadd+0x346>
 8000546:	1b8a      	subs	r2, r1, r6
 8000548:	2e00      	cmp	r6, #0
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0x2b6>
 800054c:	e0e7      	b.n	800071e <__aeabi_dadd+0x486>
 800054e:	482f      	ldr	r0, [pc, #188]	; (800060c <__aeabi_dadd+0x374>)
 8000550:	4281      	cmp	r1, r0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x2be>
 8000554:	e195      	b.n	8000882 <__aeabi_dadd+0x5ea>
 8000556:	2080      	movs	r0, #128	; 0x80
 8000558:	0400      	lsls	r0, r0, #16
 800055a:	4303      	orrs	r3, r0
 800055c:	2a38      	cmp	r2, #56	; 0x38
 800055e:	dd00      	ble.n	8000562 <__aeabi_dadd+0x2ca>
 8000560:	e143      	b.n	80007ea <__aeabi_dadd+0x552>
 8000562:	2a1f      	cmp	r2, #31
 8000564:	dd00      	ble.n	8000568 <__aeabi_dadd+0x2d0>
 8000566:	e1db      	b.n	8000920 <__aeabi_dadd+0x688>
 8000568:	2020      	movs	r0, #32
 800056a:	001d      	movs	r5, r3
 800056c:	464e      	mov	r6, r9
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4085      	lsls	r5, r0
 8000572:	40d6      	lsrs	r6, r2
 8000574:	4335      	orrs	r5, r6
 8000576:	464e      	mov	r6, r9
 8000578:	4086      	lsls	r6, r0
 800057a:	0030      	movs	r0, r6
 800057c:	40d3      	lsrs	r3, r2
 800057e:	1e46      	subs	r6, r0, #1
 8000580:	41b0      	sbcs	r0, r6
 8000582:	449c      	add	ip, r3
 8000584:	4305      	orrs	r5, r0
 8000586:	19ed      	adds	r5, r5, r7
 8000588:	42bd      	cmp	r5, r7
 800058a:	419b      	sbcs	r3, r3
 800058c:	425b      	negs	r3, r3
 800058e:	4463      	add	r3, ip
 8000590:	4698      	mov	r8, r3
 8000592:	000e      	movs	r6, r1
 8000594:	e07f      	b.n	8000696 <__aeabi_dadd+0x3fe>
 8000596:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <__aeabi_dadd+0x378>)
 8000598:	1a76      	subs	r6, r6, r1
 800059a:	4013      	ands	r3, r2
 800059c:	4698      	mov	r8, r3
 800059e:	e6f5      	b.n	800038c <__aeabi_dadd+0xf4>
 80005a0:	0028      	movs	r0, r5
 80005a2:	f001 f85f 	bl	8001664 <__clzsi2>
 80005a6:	0001      	movs	r1, r0
 80005a8:	3118      	adds	r1, #24
 80005aa:	291f      	cmp	r1, #31
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_dadd+0x318>
 80005ae:	e6cf      	b.n	8000350 <__aeabi_dadd+0xb8>
 80005b0:	002b      	movs	r3, r5
 80005b2:	3808      	subs	r0, #8
 80005b4:	4083      	lsls	r3, r0
 80005b6:	2500      	movs	r5, #0
 80005b8:	e6d2      	b.n	8000360 <__aeabi_dadd+0xc8>
 80005ba:	4662      	mov	r2, ip
 80005bc:	433a      	orrs	r2, r7
 80005be:	0011      	movs	r1, r2
 80005c0:	1e4f      	subs	r7, r1, #1
 80005c2:	41b9      	sbcs	r1, r7
 80005c4:	e6ac      	b.n	8000320 <__aeabi_dadd+0x88>
 80005c6:	4649      	mov	r1, r9
 80005c8:	0758      	lsls	r0, r3, #29
 80005ca:	08c9      	lsrs	r1, r1, #3
 80005cc:	4301      	orrs	r1, r0
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	e787      	b.n	80004e2 <__aeabi_dadd+0x24a>
 80005d2:	4649      	mov	r1, r9
 80005d4:	075a      	lsls	r2, r3, #29
 80005d6:	08c9      	lsrs	r1, r1, #3
 80005d8:	4311      	orrs	r1, r2
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	e7a6      	b.n	800052c <__aeabi_dadd+0x294>
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <__aeabi_dadd+0x37c>)
 80005e0:	1c70      	adds	r0, r6, #1
 80005e2:	4208      	tst	r0, r1
 80005e4:	d000      	beq.n	80005e8 <__aeabi_dadd+0x350>
 80005e6:	e0bb      	b.n	8000760 <__aeabi_dadd+0x4c8>
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d000      	beq.n	80005ee <__aeabi_dadd+0x356>
 80005ec:	e114      	b.n	8000818 <__aeabi_dadd+0x580>
 80005ee:	4649      	mov	r1, r9
 80005f0:	4319      	orrs	r1, r3
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x35e>
 80005f4:	e175      	b.n	80008e2 <__aeabi_dadd+0x64a>
 80005f6:	0029      	movs	r1, r5
 80005f8:	4339      	orrs	r1, r7
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x366>
 80005fc:	e17e      	b.n	80008fc <__aeabi_dadd+0x664>
 80005fe:	4649      	mov	r1, r9
 8000600:	0758      	lsls	r0, r3, #29
 8000602:	08c9      	lsrs	r1, r1, #3
 8000604:	4301      	orrs	r1, r0
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	e76e      	b.n	80004e8 <__aeabi_dadd+0x250>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	000007ff 	.word	0x000007ff
 8000610:	ff7fffff 	.word	0xff7fffff
 8000614:	000007fe 	.word	0x000007fe
 8000618:	4649      	mov	r1, r9
 800061a:	1bcd      	subs	r5, r1, r7
 800061c:	4661      	mov	r1, ip
 800061e:	1a58      	subs	r0, r3, r1
 8000620:	45a9      	cmp	r9, r5
 8000622:	4189      	sbcs	r1, r1
 8000624:	4249      	negs	r1, r1
 8000626:	4688      	mov	r8, r1
 8000628:	0001      	movs	r1, r0
 800062a:	4640      	mov	r0, r8
 800062c:	1a09      	subs	r1, r1, r0
 800062e:	4688      	mov	r8, r1
 8000630:	0209      	lsls	r1, r1, #8
 8000632:	d500      	bpl.n	8000636 <__aeabi_dadd+0x39e>
 8000634:	e0a6      	b.n	8000784 <__aeabi_dadd+0x4ec>
 8000636:	4641      	mov	r1, r8
 8000638:	4329      	orrs	r1, r5
 800063a:	d000      	beq.n	800063e <__aeabi_dadd+0x3a6>
 800063c:	e67f      	b.n	800033e <__aeabi_dadd+0xa6>
 800063e:	2300      	movs	r3, #0
 8000640:	2400      	movs	r4, #0
 8000642:	e751      	b.n	80004e8 <__aeabi_dadd+0x250>
 8000644:	4cc7      	ldr	r4, [pc, #796]	; (8000964 <__aeabi_dadd+0x6cc>)
 8000646:	42a1      	cmp	r1, r4
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x3b4>
 800064a:	e0c7      	b.n	80007dc <__aeabi_dadd+0x544>
 800064c:	2480      	movs	r4, #128	; 0x80
 800064e:	0424      	lsls	r4, r4, #16
 8000650:	4323      	orrs	r3, r4
 8000652:	2a38      	cmp	r2, #56	; 0x38
 8000654:	dc54      	bgt.n	8000700 <__aeabi_dadd+0x468>
 8000656:	2a1f      	cmp	r2, #31
 8000658:	dd00      	ble.n	800065c <__aeabi_dadd+0x3c4>
 800065a:	e0cc      	b.n	80007f6 <__aeabi_dadd+0x55e>
 800065c:	2420      	movs	r4, #32
 800065e:	4648      	mov	r0, r9
 8000660:	1aa4      	subs	r4, r4, r2
 8000662:	001d      	movs	r5, r3
 8000664:	464e      	mov	r6, r9
 8000666:	40a0      	lsls	r0, r4
 8000668:	40d6      	lsrs	r6, r2
 800066a:	40a5      	lsls	r5, r4
 800066c:	0004      	movs	r4, r0
 800066e:	40d3      	lsrs	r3, r2
 8000670:	4662      	mov	r2, ip
 8000672:	4335      	orrs	r5, r6
 8000674:	1e66      	subs	r6, r4, #1
 8000676:	41b4      	sbcs	r4, r6
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	469c      	mov	ip, r3
 800067c:	4325      	orrs	r5, r4
 800067e:	e044      	b.n	800070a <__aeabi_dadd+0x472>
 8000680:	4662      	mov	r2, ip
 8000682:	433a      	orrs	r2, r7
 8000684:	0015      	movs	r5, r2
 8000686:	1e6f      	subs	r7, r5, #1
 8000688:	41bd      	sbcs	r5, r7
 800068a:	444d      	add	r5, r9
 800068c:	454d      	cmp	r5, r9
 800068e:	4189      	sbcs	r1, r1
 8000690:	4249      	negs	r1, r1
 8000692:	4688      	mov	r8, r1
 8000694:	4498      	add	r8, r3
 8000696:	4643      	mov	r3, r8
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	d400      	bmi.n	800069e <__aeabi_dadd+0x406>
 800069c:	e718      	b.n	80004d0 <__aeabi_dadd+0x238>
 800069e:	4bb1      	ldr	r3, [pc, #708]	; (8000964 <__aeabi_dadd+0x6cc>)
 80006a0:	3601      	adds	r6, #1
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d049      	beq.n	800073a <__aeabi_dadd+0x4a2>
 80006a6:	4642      	mov	r2, r8
 80006a8:	4baf      	ldr	r3, [pc, #700]	; (8000968 <__aeabi_dadd+0x6d0>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	401a      	ands	r2, r3
 80006ae:	0013      	movs	r3, r2
 80006b0:	086a      	lsrs	r2, r5, #1
 80006b2:	400d      	ands	r5, r1
 80006b4:	4315      	orrs	r5, r2
 80006b6:	07d9      	lsls	r1, r3, #31
 80006b8:	085b      	lsrs	r3, r3, #1
 80006ba:	4698      	mov	r8, r3
 80006bc:	430d      	orrs	r5, r1
 80006be:	e665      	b.n	800038c <__aeabi_dadd+0xf4>
 80006c0:	0018      	movs	r0, r3
 80006c2:	3e1f      	subs	r6, #31
 80006c4:	40f0      	lsrs	r0, r6
 80006c6:	2a20      	cmp	r2, #32
 80006c8:	d003      	beq.n	80006d2 <__aeabi_dadd+0x43a>
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	1a8a      	subs	r2, r1, r2
 80006ce:	4093      	lsls	r3, r2
 80006d0:	431d      	orrs	r5, r3
 80006d2:	1e69      	subs	r1, r5, #1
 80006d4:	418d      	sbcs	r5, r1
 80006d6:	2300      	movs	r3, #0
 80006d8:	2600      	movs	r6, #0
 80006da:	4698      	mov	r8, r3
 80006dc:	4305      	orrs	r5, r0
 80006de:	e6f7      	b.n	80004d0 <__aeabi_dadd+0x238>
 80006e0:	0011      	movs	r1, r2
 80006e2:	4665      	mov	r5, ip
 80006e4:	3920      	subs	r1, #32
 80006e6:	40cd      	lsrs	r5, r1
 80006e8:	2a20      	cmp	r2, #32
 80006ea:	d004      	beq.n	80006f6 <__aeabi_dadd+0x45e>
 80006ec:	2040      	movs	r0, #64	; 0x40
 80006ee:	4661      	mov	r1, ip
 80006f0:	1a82      	subs	r2, r0, r2
 80006f2:	4091      	lsls	r1, r2
 80006f4:	430f      	orrs	r7, r1
 80006f6:	0039      	movs	r1, r7
 80006f8:	1e4f      	subs	r7, r1, #1
 80006fa:	41b9      	sbcs	r1, r7
 80006fc:	4329      	orrs	r1, r5
 80006fe:	e60f      	b.n	8000320 <__aeabi_dadd+0x88>
 8000700:	464a      	mov	r2, r9
 8000702:	4313      	orrs	r3, r2
 8000704:	001d      	movs	r5, r3
 8000706:	1e6b      	subs	r3, r5, #1
 8000708:	419d      	sbcs	r5, r3
 800070a:	1b7d      	subs	r5, r7, r5
 800070c:	42af      	cmp	r7, r5
 800070e:	419b      	sbcs	r3, r3
 8000710:	4662      	mov	r2, ip
 8000712:	425b      	negs	r3, r3
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	4698      	mov	r8, r3
 8000718:	4654      	mov	r4, sl
 800071a:	000e      	movs	r6, r1
 800071c:	e607      	b.n	800032e <__aeabi_dadd+0x96>
 800071e:	4648      	mov	r0, r9
 8000720:	4318      	orrs	r0, r3
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x48e>
 8000724:	e0b3      	b.n	800088e <__aeabi_dadd+0x5f6>
 8000726:	1e50      	subs	r0, r2, #1
 8000728:	2a01      	cmp	r2, #1
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x496>
 800072c:	e10d      	b.n	800094a <__aeabi_dadd+0x6b2>
 800072e:	4d8d      	ldr	r5, [pc, #564]	; (8000964 <__aeabi_dadd+0x6cc>)
 8000730:	42aa      	cmp	r2, r5
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x49e>
 8000734:	e0a5      	b.n	8000882 <__aeabi_dadd+0x5ea>
 8000736:	0002      	movs	r2, r0
 8000738:	e710      	b.n	800055c <__aeabi_dadd+0x2c4>
 800073a:	0032      	movs	r2, r6
 800073c:	2300      	movs	r3, #0
 800073e:	2100      	movs	r1, #0
 8000740:	e644      	b.n	80003cc <__aeabi_dadd+0x134>
 8000742:	2120      	movs	r1, #32
 8000744:	0038      	movs	r0, r7
 8000746:	1a89      	subs	r1, r1, r2
 8000748:	4665      	mov	r5, ip
 800074a:	408f      	lsls	r7, r1
 800074c:	408d      	lsls	r5, r1
 800074e:	40d0      	lsrs	r0, r2
 8000750:	1e79      	subs	r1, r7, #1
 8000752:	418f      	sbcs	r7, r1
 8000754:	4305      	orrs	r5, r0
 8000756:	433d      	orrs	r5, r7
 8000758:	4667      	mov	r7, ip
 800075a:	40d7      	lsrs	r7, r2
 800075c:	19db      	adds	r3, r3, r7
 800075e:	e794      	b.n	800068a <__aeabi_dadd+0x3f2>
 8000760:	4a80      	ldr	r2, [pc, #512]	; (8000964 <__aeabi_dadd+0x6cc>)
 8000762:	4290      	cmp	r0, r2
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x4d0>
 8000766:	e0ec      	b.n	8000942 <__aeabi_dadd+0x6aa>
 8000768:	0039      	movs	r1, r7
 800076a:	4449      	add	r1, r9
 800076c:	4549      	cmp	r1, r9
 800076e:	4192      	sbcs	r2, r2
 8000770:	4463      	add	r3, ip
 8000772:	4252      	negs	r2, r2
 8000774:	189b      	adds	r3, r3, r2
 8000776:	07dd      	lsls	r5, r3, #31
 8000778:	0849      	lsrs	r1, r1, #1
 800077a:	085b      	lsrs	r3, r3, #1
 800077c:	4698      	mov	r8, r3
 800077e:	0006      	movs	r6, r0
 8000780:	430d      	orrs	r5, r1
 8000782:	e6a5      	b.n	80004d0 <__aeabi_dadd+0x238>
 8000784:	464a      	mov	r2, r9
 8000786:	1abd      	subs	r5, r7, r2
 8000788:	42af      	cmp	r7, r5
 800078a:	4189      	sbcs	r1, r1
 800078c:	4662      	mov	r2, ip
 800078e:	4249      	negs	r1, r1
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	1a5b      	subs	r3, r3, r1
 8000794:	4698      	mov	r8, r3
 8000796:	4654      	mov	r4, sl
 8000798:	e5d1      	b.n	800033e <__aeabi_dadd+0xa6>
 800079a:	076c      	lsls	r4, r5, #29
 800079c:	08f9      	lsrs	r1, r7, #3
 800079e:	4321      	orrs	r1, r4
 80007a0:	08eb      	lsrs	r3, r5, #3
 80007a2:	0004      	movs	r4, r0
 80007a4:	e69d      	b.n	80004e2 <__aeabi_dadd+0x24a>
 80007a6:	464a      	mov	r2, r9
 80007a8:	431a      	orrs	r2, r3
 80007aa:	d175      	bne.n	8000898 <__aeabi_dadd+0x600>
 80007ac:	4661      	mov	r1, ip
 80007ae:	4339      	orrs	r1, r7
 80007b0:	d114      	bne.n	80007dc <__aeabi_dadd+0x544>
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	2400      	movs	r4, #0
 80007b6:	031b      	lsls	r3, r3, #12
 80007b8:	e6bc      	b.n	8000534 <__aeabi_dadd+0x29c>
 80007ba:	464a      	mov	r2, r9
 80007bc:	1bd5      	subs	r5, r2, r7
 80007be:	45a9      	cmp	r9, r5
 80007c0:	4189      	sbcs	r1, r1
 80007c2:	4662      	mov	r2, ip
 80007c4:	4249      	negs	r1, r1
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	1a5b      	subs	r3, r3, r1
 80007ca:	4698      	mov	r8, r3
 80007cc:	2601      	movs	r6, #1
 80007ce:	e5ae      	b.n	800032e <__aeabi_dadd+0x96>
 80007d0:	464a      	mov	r2, r9
 80007d2:	08d1      	lsrs	r1, r2, #3
 80007d4:	075a      	lsls	r2, r3, #29
 80007d6:	4311      	orrs	r1, r2
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	e6a7      	b.n	800052c <__aeabi_dadd+0x294>
 80007dc:	4663      	mov	r3, ip
 80007de:	08f9      	lsrs	r1, r7, #3
 80007e0:	075a      	lsls	r2, r3, #29
 80007e2:	4654      	mov	r4, sl
 80007e4:	4311      	orrs	r1, r2
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	e6a0      	b.n	800052c <__aeabi_dadd+0x294>
 80007ea:	464a      	mov	r2, r9
 80007ec:	4313      	orrs	r3, r2
 80007ee:	001d      	movs	r5, r3
 80007f0:	1e6b      	subs	r3, r5, #1
 80007f2:	419d      	sbcs	r5, r3
 80007f4:	e6c7      	b.n	8000586 <__aeabi_dadd+0x2ee>
 80007f6:	0014      	movs	r4, r2
 80007f8:	001e      	movs	r6, r3
 80007fa:	3c20      	subs	r4, #32
 80007fc:	40e6      	lsrs	r6, r4
 80007fe:	2a20      	cmp	r2, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x576>
 8000802:	2440      	movs	r4, #64	; 0x40
 8000804:	1aa2      	subs	r2, r4, r2
 8000806:	4093      	lsls	r3, r2
 8000808:	464a      	mov	r2, r9
 800080a:	431a      	orrs	r2, r3
 800080c:	4691      	mov	r9, r2
 800080e:	464d      	mov	r5, r9
 8000810:	1e6b      	subs	r3, r5, #1
 8000812:	419d      	sbcs	r5, r3
 8000814:	4335      	orrs	r5, r6
 8000816:	e778      	b.n	800070a <__aeabi_dadd+0x472>
 8000818:	464a      	mov	r2, r9
 800081a:	431a      	orrs	r2, r3
 800081c:	d000      	beq.n	8000820 <__aeabi_dadd+0x588>
 800081e:	e66b      	b.n	80004f8 <__aeabi_dadd+0x260>
 8000820:	076b      	lsls	r3, r5, #29
 8000822:	08f9      	lsrs	r1, r7, #3
 8000824:	4319      	orrs	r1, r3
 8000826:	08eb      	lsrs	r3, r5, #3
 8000828:	e680      	b.n	800052c <__aeabi_dadd+0x294>
 800082a:	4661      	mov	r1, ip
 800082c:	4339      	orrs	r1, r7
 800082e:	d054      	beq.n	80008da <__aeabi_dadd+0x642>
 8000830:	4663      	mov	r3, ip
 8000832:	08f9      	lsrs	r1, r7, #3
 8000834:	075c      	lsls	r4, r3, #29
 8000836:	4321      	orrs	r1, r4
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	0004      	movs	r4, r0
 800083c:	e654      	b.n	80004e8 <__aeabi_dadd+0x250>
 800083e:	464a      	mov	r2, r9
 8000840:	1abd      	subs	r5, r7, r2
 8000842:	42af      	cmp	r7, r5
 8000844:	4189      	sbcs	r1, r1
 8000846:	4662      	mov	r2, ip
 8000848:	4249      	negs	r1, r1
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	1a5b      	subs	r3, r3, r1
 800084e:	4698      	mov	r8, r3
 8000850:	0004      	movs	r4, r0
 8000852:	2601      	movs	r6, #1
 8000854:	e56b      	b.n	800032e <__aeabi_dadd+0x96>
 8000856:	464a      	mov	r2, r9
 8000858:	1bd5      	subs	r5, r2, r7
 800085a:	45a9      	cmp	r9, r5
 800085c:	4189      	sbcs	r1, r1
 800085e:	4662      	mov	r2, ip
 8000860:	4249      	negs	r1, r1
 8000862:	1a9a      	subs	r2, r3, r2
 8000864:	1a52      	subs	r2, r2, r1
 8000866:	4690      	mov	r8, r2
 8000868:	0212      	lsls	r2, r2, #8
 800086a:	d532      	bpl.n	80008d2 <__aeabi_dadd+0x63a>
 800086c:	464a      	mov	r2, r9
 800086e:	1abd      	subs	r5, r7, r2
 8000870:	42af      	cmp	r7, r5
 8000872:	4189      	sbcs	r1, r1
 8000874:	4662      	mov	r2, ip
 8000876:	4249      	negs	r1, r1
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	1a5b      	subs	r3, r3, r1
 800087c:	4698      	mov	r8, r3
 800087e:	0004      	movs	r4, r0
 8000880:	e584      	b.n	800038c <__aeabi_dadd+0xf4>
 8000882:	4663      	mov	r3, ip
 8000884:	08f9      	lsrs	r1, r7, #3
 8000886:	075a      	lsls	r2, r3, #29
 8000888:	4311      	orrs	r1, r2
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	e64e      	b.n	800052c <__aeabi_dadd+0x294>
 800088e:	08f9      	lsrs	r1, r7, #3
 8000890:	0768      	lsls	r0, r5, #29
 8000892:	4301      	orrs	r1, r0
 8000894:	08eb      	lsrs	r3, r5, #3
 8000896:	e624      	b.n	80004e2 <__aeabi_dadd+0x24a>
 8000898:	4662      	mov	r2, ip
 800089a:	433a      	orrs	r2, r7
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x608>
 800089e:	e698      	b.n	80005d2 <__aeabi_dadd+0x33a>
 80008a0:	464a      	mov	r2, r9
 80008a2:	08d1      	lsrs	r1, r2, #3
 80008a4:	075a      	lsls	r2, r3, #29
 80008a6:	4311      	orrs	r1, r2
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	031b      	lsls	r3, r3, #12
 80008ae:	421a      	tst	r2, r3
 80008b0:	d008      	beq.n	80008c4 <__aeabi_dadd+0x62c>
 80008b2:	4660      	mov	r0, ip
 80008b4:	08c5      	lsrs	r5, r0, #3
 80008b6:	421d      	tst	r5, r3
 80008b8:	d104      	bne.n	80008c4 <__aeabi_dadd+0x62c>
 80008ba:	4654      	mov	r4, sl
 80008bc:	002a      	movs	r2, r5
 80008be:	08f9      	lsrs	r1, r7, #3
 80008c0:	0743      	lsls	r3, r0, #29
 80008c2:	4319      	orrs	r1, r3
 80008c4:	0f4b      	lsrs	r3, r1, #29
 80008c6:	00c9      	lsls	r1, r1, #3
 80008c8:	075b      	lsls	r3, r3, #29
 80008ca:	08c9      	lsrs	r1, r1, #3
 80008cc:	4319      	orrs	r1, r3
 80008ce:	0013      	movs	r3, r2
 80008d0:	e62c      	b.n	800052c <__aeabi_dadd+0x294>
 80008d2:	4641      	mov	r1, r8
 80008d4:	4329      	orrs	r1, r5
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x642>
 80008d8:	e5fa      	b.n	80004d0 <__aeabi_dadd+0x238>
 80008da:	2300      	movs	r3, #0
 80008dc:	000a      	movs	r2, r1
 80008de:	2400      	movs	r4, #0
 80008e0:	e602      	b.n	80004e8 <__aeabi_dadd+0x250>
 80008e2:	076b      	lsls	r3, r5, #29
 80008e4:	08f9      	lsrs	r1, r7, #3
 80008e6:	4319      	orrs	r1, r3
 80008e8:	08eb      	lsrs	r3, r5, #3
 80008ea:	e5fd      	b.n	80004e8 <__aeabi_dadd+0x250>
 80008ec:	4663      	mov	r3, ip
 80008ee:	08f9      	lsrs	r1, r7, #3
 80008f0:	075b      	lsls	r3, r3, #29
 80008f2:	4319      	orrs	r1, r3
 80008f4:	4663      	mov	r3, ip
 80008f6:	0004      	movs	r4, r0
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	e617      	b.n	800052c <__aeabi_dadd+0x294>
 80008fc:	003d      	movs	r5, r7
 80008fe:	444d      	add	r5, r9
 8000900:	4463      	add	r3, ip
 8000902:	454d      	cmp	r5, r9
 8000904:	4189      	sbcs	r1, r1
 8000906:	4698      	mov	r8, r3
 8000908:	4249      	negs	r1, r1
 800090a:	4488      	add	r8, r1
 800090c:	4643      	mov	r3, r8
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	d400      	bmi.n	8000914 <__aeabi_dadd+0x67c>
 8000912:	e5dd      	b.n	80004d0 <__aeabi_dadd+0x238>
 8000914:	4642      	mov	r2, r8
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <__aeabi_dadd+0x6d0>)
 8000918:	2601      	movs	r6, #1
 800091a:	401a      	ands	r2, r3
 800091c:	4690      	mov	r8, r2
 800091e:	e5d7      	b.n	80004d0 <__aeabi_dadd+0x238>
 8000920:	0010      	movs	r0, r2
 8000922:	001e      	movs	r6, r3
 8000924:	3820      	subs	r0, #32
 8000926:	40c6      	lsrs	r6, r0
 8000928:	2a20      	cmp	r2, #32
 800092a:	d005      	beq.n	8000938 <__aeabi_dadd+0x6a0>
 800092c:	2040      	movs	r0, #64	; 0x40
 800092e:	1a82      	subs	r2, r0, r2
 8000930:	4093      	lsls	r3, r2
 8000932:	464a      	mov	r2, r9
 8000934:	431a      	orrs	r2, r3
 8000936:	4691      	mov	r9, r2
 8000938:	464d      	mov	r5, r9
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4335      	orrs	r5, r6
 8000940:	e621      	b.n	8000586 <__aeabi_dadd+0x2ee>
 8000942:	0002      	movs	r2, r0
 8000944:	2300      	movs	r3, #0
 8000946:	2100      	movs	r1, #0
 8000948:	e540      	b.n	80003cc <__aeabi_dadd+0x134>
 800094a:	464a      	mov	r2, r9
 800094c:	19d5      	adds	r5, r2, r7
 800094e:	42bd      	cmp	r5, r7
 8000950:	4189      	sbcs	r1, r1
 8000952:	4463      	add	r3, ip
 8000954:	4698      	mov	r8, r3
 8000956:	4249      	negs	r1, r1
 8000958:	4488      	add	r8, r1
 800095a:	e5b3      	b.n	80004c4 <__aeabi_dadd+0x22c>
 800095c:	2100      	movs	r1, #0
 800095e:	4a01      	ldr	r2, [pc, #4]	; (8000964 <__aeabi_dadd+0x6cc>)
 8000960:	000b      	movs	r3, r1
 8000962:	e533      	b.n	80003cc <__aeabi_dadd+0x134>
 8000964:	000007ff 	.word	0x000007ff
 8000968:	ff7fffff 	.word	0xff7fffff

0800096c <__aeabi_dmul>:
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	4657      	mov	r7, sl
 8000970:	464e      	mov	r6, r9
 8000972:	4645      	mov	r5, r8
 8000974:	46de      	mov	lr, fp
 8000976:	b5e0      	push	{r5, r6, r7, lr}
 8000978:	4698      	mov	r8, r3
 800097a:	030c      	lsls	r4, r1, #12
 800097c:	004b      	lsls	r3, r1, #1
 800097e:	0006      	movs	r6, r0
 8000980:	4692      	mov	sl, r2
 8000982:	b087      	sub	sp, #28
 8000984:	0b24      	lsrs	r4, r4, #12
 8000986:	0d5b      	lsrs	r3, r3, #21
 8000988:	0fcf      	lsrs	r7, r1, #31
 800098a:	2b00      	cmp	r3, #0
 800098c:	d06c      	beq.n	8000a68 <__aeabi_dmul+0xfc>
 800098e:	4add      	ldr	r2, [pc, #884]	; (8000d04 <__aeabi_dmul+0x398>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d100      	bne.n	8000996 <__aeabi_dmul+0x2a>
 8000994:	e086      	b.n	8000aa4 <__aeabi_dmul+0x138>
 8000996:	0f42      	lsrs	r2, r0, #29
 8000998:	00e4      	lsls	r4, r4, #3
 800099a:	4314      	orrs	r4, r2
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0412      	lsls	r2, r2, #16
 80009a0:	4314      	orrs	r4, r2
 80009a2:	4ad9      	ldr	r2, [pc, #868]	; (8000d08 <__aeabi_dmul+0x39c>)
 80009a4:	00c5      	lsls	r5, r0, #3
 80009a6:	4694      	mov	ip, r2
 80009a8:	4463      	add	r3, ip
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	4699      	mov	r9, r3
 80009b0:	469b      	mov	fp, r3
 80009b2:	4643      	mov	r3, r8
 80009b4:	4642      	mov	r2, r8
 80009b6:	031e      	lsls	r6, r3, #12
 80009b8:	0fd2      	lsrs	r2, r2, #31
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4650      	mov	r0, sl
 80009be:	4690      	mov	r8, r2
 80009c0:	0b36      	lsrs	r6, r6, #12
 80009c2:	0d5b      	lsrs	r3, r3, #21
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dmul+0x5c>
 80009c6:	e078      	b.n	8000aba <__aeabi_dmul+0x14e>
 80009c8:	4ace      	ldr	r2, [pc, #824]	; (8000d04 <__aeabi_dmul+0x398>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01d      	beq.n	8000a0a <__aeabi_dmul+0x9e>
 80009ce:	49ce      	ldr	r1, [pc, #824]	; (8000d08 <__aeabi_dmul+0x39c>)
 80009d0:	0f42      	lsrs	r2, r0, #29
 80009d2:	468c      	mov	ip, r1
 80009d4:	9900      	ldr	r1, [sp, #0]
 80009d6:	4463      	add	r3, ip
 80009d8:	00f6      	lsls	r6, r6, #3
 80009da:	468c      	mov	ip, r1
 80009dc:	4316      	orrs	r6, r2
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	449c      	add	ip, r3
 80009e2:	0412      	lsls	r2, r2, #16
 80009e4:	4663      	mov	r3, ip
 80009e6:	4316      	orrs	r6, r2
 80009e8:	00c2      	lsls	r2, r0, #3
 80009ea:	2000      	movs	r0, #0
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	9900      	ldr	r1, [sp, #0]
 80009f0:	4643      	mov	r3, r8
 80009f2:	3101      	adds	r1, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	4649      	mov	r1, r9
 80009f8:	407b      	eors	r3, r7
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	290f      	cmp	r1, #15
 80009fe:	d900      	bls.n	8000a02 <__aeabi_dmul+0x96>
 8000a00:	e07e      	b.n	8000b00 <__aeabi_dmul+0x194>
 8000a02:	4bc2      	ldr	r3, [pc, #776]	; (8000d0c <__aeabi_dmul+0x3a0>)
 8000a04:	0089      	lsls	r1, r1, #2
 8000a06:	5859      	ldr	r1, [r3, r1]
 8000a08:	468f      	mov	pc, r1
 8000a0a:	4652      	mov	r2, sl
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	4332      	orrs	r2, r6
 8000a10:	d000      	beq.n	8000a14 <__aeabi_dmul+0xa8>
 8000a12:	e156      	b.n	8000cc2 <__aeabi_dmul+0x356>
 8000a14:	49bb      	ldr	r1, [pc, #748]	; (8000d04 <__aeabi_dmul+0x398>)
 8000a16:	2600      	movs	r6, #0
 8000a18:	468c      	mov	ip, r1
 8000a1a:	4463      	add	r3, ip
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2302      	movs	r3, #2
 8000a22:	4319      	orrs	r1, r3
 8000a24:	4689      	mov	r9, r1
 8000a26:	2002      	movs	r0, #2
 8000a28:	e7e1      	b.n	80009ee <__aeabi_dmul+0x82>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	0034      	movs	r4, r6
 8000a30:	0015      	movs	r5, r2
 8000a32:	4683      	mov	fp, r0
 8000a34:	465b      	mov	r3, fp
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d05e      	beq.n	8000af8 <__aeabi_dmul+0x18c>
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dmul+0xd4>
 8000a3e:	e1f3      	b.n	8000e28 <__aeabi_dmul+0x4bc>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dmul+0xda>
 8000a44:	e118      	b.n	8000c78 <__aeabi_dmul+0x30c>
 8000a46:	2200      	movs	r2, #0
 8000a48:	2400      	movs	r4, #0
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	0512      	lsls	r2, r2, #20
 8000a50:	4322      	orrs	r2, r4
 8000a52:	07db      	lsls	r3, r3, #31
 8000a54:	431a      	orrs	r2, r3
 8000a56:	0028      	movs	r0, r5
 8000a58:	0011      	movs	r1, r2
 8000a5a:	b007      	add	sp, #28
 8000a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5e:	46bb      	mov	fp, r7
 8000a60:	46b2      	mov	sl, r6
 8000a62:	46a9      	mov	r9, r5
 8000a64:	46a0      	mov	r8, r4
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	0025      	movs	r5, r4
 8000a6a:	4305      	orrs	r5, r0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dmul+0x104>
 8000a6e:	e141      	b.n	8000cf4 <__aeabi_dmul+0x388>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dmul+0x10a>
 8000a74:	e1ad      	b.n	8000dd2 <__aeabi_dmul+0x466>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f000 fdf4 	bl	8001664 <__clzsi2>
 8000a7c:	0001      	movs	r1, r0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	390b      	subs	r1, #11
 8000a82:	231d      	movs	r3, #29
 8000a84:	0010      	movs	r0, r2
 8000a86:	1a5b      	subs	r3, r3, r1
 8000a88:	0031      	movs	r1, r6
 8000a8a:	0035      	movs	r5, r6
 8000a8c:	3808      	subs	r0, #8
 8000a8e:	4084      	lsls	r4, r0
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	4085      	lsls	r5, r0
 8000a94:	430c      	orrs	r4, r1
 8000a96:	489e      	ldr	r0, [pc, #632]	; (8000d10 <__aeabi_dmul+0x3a4>)
 8000a98:	1a83      	subs	r3, r0, r2
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	469b      	mov	fp, r3
 8000aa2:	e786      	b.n	80009b2 <__aeabi_dmul+0x46>
 8000aa4:	0005      	movs	r5, r0
 8000aa6:	4325      	orrs	r5, r4
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dmul+0x140>
 8000aaa:	e11c      	b.n	8000ce6 <__aeabi_dmul+0x37a>
 8000aac:	2208      	movs	r2, #8
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	4691      	mov	r9, r2
 8000ab6:	469b      	mov	fp, r3
 8000ab8:	e77b      	b.n	80009b2 <__aeabi_dmul+0x46>
 8000aba:	4652      	mov	r2, sl
 8000abc:	4332      	orrs	r2, r6
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dmul+0x156>
 8000ac0:	e10a      	b.n	8000cd8 <__aeabi_dmul+0x36c>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dmul+0x15c>
 8000ac6:	e176      	b.n	8000db6 <__aeabi_dmul+0x44a>
 8000ac8:	0030      	movs	r0, r6
 8000aca:	f000 fdcb 	bl	8001664 <__clzsi2>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	3a0b      	subs	r2, #11
 8000ad2:	231d      	movs	r3, #29
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	4652      	mov	r2, sl
 8000ada:	3908      	subs	r1, #8
 8000adc:	40da      	lsrs	r2, r3
 8000ade:	408e      	lsls	r6, r1
 8000ae0:	4316      	orrs	r6, r2
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	408a      	lsls	r2, r1
 8000ae6:	9b00      	ldr	r3, [sp, #0]
 8000ae8:	4989      	ldr	r1, [pc, #548]	; (8000d10 <__aeabi_dmul+0x3a4>)
 8000aea:	1a18      	subs	r0, r3, r0
 8000aec:	0003      	movs	r3, r0
 8000aee:	468c      	mov	ip, r1
 8000af0:	4463      	add	r3, ip
 8000af2:	2000      	movs	r0, #0
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	e77a      	b.n	80009ee <__aeabi_dmul+0x82>
 8000af8:	2400      	movs	r4, #0
 8000afa:	2500      	movs	r5, #0
 8000afc:	4a81      	ldr	r2, [pc, #516]	; (8000d04 <__aeabi_dmul+0x398>)
 8000afe:	e7a5      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000b00:	0c2f      	lsrs	r7, r5, #16
 8000b02:	042d      	lsls	r5, r5, #16
 8000b04:	0c2d      	lsrs	r5, r5, #16
 8000b06:	002b      	movs	r3, r5
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	0412      	lsls	r2, r2, #16
 8000b0c:	0c12      	lsrs	r2, r2, #16
 8000b0e:	4353      	muls	r3, r2
 8000b10:	4698      	mov	r8, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	0028      	movs	r0, r5
 8000b16:	437b      	muls	r3, r7
 8000b18:	4699      	mov	r9, r3
 8000b1a:	4348      	muls	r0, r1
 8000b1c:	4448      	add	r0, r9
 8000b1e:	4683      	mov	fp, r0
 8000b20:	4640      	mov	r0, r8
 8000b22:	000b      	movs	r3, r1
 8000b24:	0c00      	lsrs	r0, r0, #16
 8000b26:	4682      	mov	sl, r0
 8000b28:	4658      	mov	r0, fp
 8000b2a:	437b      	muls	r3, r7
 8000b2c:	4450      	add	r0, sl
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	4581      	cmp	r9, r0
 8000b32:	d906      	bls.n	8000b42 <__aeabi_dmul+0x1d6>
 8000b34:	469a      	mov	sl, r3
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	025b      	lsls	r3, r3, #9
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	44ca      	add	sl, r9
 8000b3e:	4653      	mov	r3, sl
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	0c03      	lsrs	r3, r0, #16
 8000b44:	469b      	mov	fp, r3
 8000b46:	4643      	mov	r3, r8
 8000b48:	041b      	lsls	r3, r3, #16
 8000b4a:	0400      	lsls	r0, r0, #16
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	4698      	mov	r8, r3
 8000b50:	0003      	movs	r3, r0
 8000b52:	4443      	add	r3, r8
 8000b54:	9304      	str	r3, [sp, #16]
 8000b56:	0c33      	lsrs	r3, r6, #16
 8000b58:	4699      	mov	r9, r3
 8000b5a:	002b      	movs	r3, r5
 8000b5c:	0436      	lsls	r6, r6, #16
 8000b5e:	0c36      	lsrs	r6, r6, #16
 8000b60:	4373      	muls	r3, r6
 8000b62:	4698      	mov	r8, r3
 8000b64:	0033      	movs	r3, r6
 8000b66:	437b      	muls	r3, r7
 8000b68:	469a      	mov	sl, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	435d      	muls	r5, r3
 8000b6e:	435f      	muls	r7, r3
 8000b70:	4643      	mov	r3, r8
 8000b72:	4455      	add	r5, sl
 8000b74:	0c18      	lsrs	r0, r3, #16
 8000b76:	1940      	adds	r0, r0, r5
 8000b78:	4582      	cmp	sl, r0
 8000b7a:	d903      	bls.n	8000b84 <__aeabi_dmul+0x218>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	469a      	mov	sl, r3
 8000b82:	4457      	add	r7, sl
 8000b84:	0c05      	lsrs	r5, r0, #16
 8000b86:	19eb      	adds	r3, r5, r7
 8000b88:	9305      	str	r3, [sp, #20]
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	041d      	lsls	r5, r3, #16
 8000b8e:	0c2d      	lsrs	r5, r5, #16
 8000b90:	0400      	lsls	r0, r0, #16
 8000b92:	1940      	adds	r0, r0, r5
 8000b94:	0c25      	lsrs	r5, r4, #16
 8000b96:	0424      	lsls	r4, r4, #16
 8000b98:	0c24      	lsrs	r4, r4, #16
 8000b9a:	0027      	movs	r7, r4
 8000b9c:	4357      	muls	r7, r2
 8000b9e:	436a      	muls	r2, r5
 8000ba0:	4690      	mov	r8, r2
 8000ba2:	002a      	movs	r2, r5
 8000ba4:	0c3b      	lsrs	r3, r7, #16
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	434a      	muls	r2, r1
 8000baa:	4361      	muls	r1, r4
 8000bac:	4441      	add	r1, r8
 8000bae:	4451      	add	r1, sl
 8000bb0:	4483      	add	fp, r0
 8000bb2:	4588      	cmp	r8, r1
 8000bb4:	d903      	bls.n	8000bbe <__aeabi_dmul+0x252>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	025b      	lsls	r3, r3, #9
 8000bba:	4698      	mov	r8, r3
 8000bbc:	4442      	add	r2, r8
 8000bbe:	043f      	lsls	r7, r7, #16
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	0c3f      	lsrs	r7, r7, #16
 8000bc4:	0409      	lsls	r1, r1, #16
 8000bc6:	19c9      	adds	r1, r1, r7
 8000bc8:	0027      	movs	r7, r4
 8000bca:	4698      	mov	r8, r3
 8000bcc:	464b      	mov	r3, r9
 8000bce:	4377      	muls	r7, r6
 8000bd0:	435c      	muls	r4, r3
 8000bd2:	436e      	muls	r6, r5
 8000bd4:	435d      	muls	r5, r3
 8000bd6:	0c3b      	lsrs	r3, r7, #16
 8000bd8:	4699      	mov	r9, r3
 8000bda:	19a4      	adds	r4, r4, r6
 8000bdc:	444c      	add	r4, r9
 8000bde:	4442      	add	r2, r8
 8000be0:	9503      	str	r5, [sp, #12]
 8000be2:	42a6      	cmp	r6, r4
 8000be4:	d904      	bls.n	8000bf0 <__aeabi_dmul+0x284>
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	025b      	lsls	r3, r3, #9
 8000bea:	4698      	mov	r8, r3
 8000bec:	4445      	add	r5, r8
 8000bee:	9503      	str	r5, [sp, #12]
 8000bf0:	9b02      	ldr	r3, [sp, #8]
 8000bf2:	043f      	lsls	r7, r7, #16
 8000bf4:	445b      	add	r3, fp
 8000bf6:	001e      	movs	r6, r3
 8000bf8:	4283      	cmp	r3, r0
 8000bfa:	4180      	sbcs	r0, r0
 8000bfc:	0423      	lsls	r3, r4, #16
 8000bfe:	4698      	mov	r8, r3
 8000c00:	9b05      	ldr	r3, [sp, #20]
 8000c02:	0c3f      	lsrs	r7, r7, #16
 8000c04:	4447      	add	r7, r8
 8000c06:	4698      	mov	r8, r3
 8000c08:	1876      	adds	r6, r6, r1
 8000c0a:	428e      	cmp	r6, r1
 8000c0c:	4189      	sbcs	r1, r1
 8000c0e:	4447      	add	r7, r8
 8000c10:	4240      	negs	r0, r0
 8000c12:	183d      	adds	r5, r7, r0
 8000c14:	46a8      	mov	r8, r5
 8000c16:	4693      	mov	fp, r2
 8000c18:	4249      	negs	r1, r1
 8000c1a:	468a      	mov	sl, r1
 8000c1c:	44c3      	add	fp, r8
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	41bf      	sbcs	r7, r7
 8000c22:	4580      	cmp	r8, r0
 8000c24:	4180      	sbcs	r0, r0
 8000c26:	9b03      	ldr	r3, [sp, #12]
 8000c28:	44da      	add	sl, fp
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	4653      	mov	r3, sl
 8000c2e:	4240      	negs	r0, r0
 8000c30:	427f      	negs	r7, r7
 8000c32:	4307      	orrs	r7, r0
 8000c34:	0c24      	lsrs	r4, r4, #16
 8000c36:	4593      	cmp	fp, r2
 8000c38:	4192      	sbcs	r2, r2
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	4189      	sbcs	r1, r1
 8000c3e:	193f      	adds	r7, r7, r4
 8000c40:	0ddc      	lsrs	r4, r3, #23
 8000c42:	9b04      	ldr	r3, [sp, #16]
 8000c44:	0275      	lsls	r5, r6, #9
 8000c46:	431d      	orrs	r5, r3
 8000c48:	1e68      	subs	r0, r5, #1
 8000c4a:	4185      	sbcs	r5, r0
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	4252      	negs	r2, r2
 8000c50:	4249      	negs	r1, r1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	18bf      	adds	r7, r7, r2
 8000c56:	4447      	add	r7, r8
 8000c58:	0df6      	lsrs	r6, r6, #23
 8000c5a:	027f      	lsls	r7, r7, #9
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	025a      	lsls	r2, r3, #9
 8000c60:	433c      	orrs	r4, r7
 8000c62:	4315      	orrs	r5, r2
 8000c64:	01fb      	lsls	r3, r7, #7
 8000c66:	d400      	bmi.n	8000c6a <__aeabi_dmul+0x2fe>
 8000c68:	e0c1      	b.n	8000dee <__aeabi_dmul+0x482>
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	086a      	lsrs	r2, r5, #1
 8000c6e:	400d      	ands	r5, r1
 8000c70:	4315      	orrs	r5, r2
 8000c72:	07e2      	lsls	r2, r4, #31
 8000c74:	4315      	orrs	r5, r2
 8000c76:	0864      	lsrs	r4, r4, #1
 8000c78:	4926      	ldr	r1, [pc, #152]	; (8000d14 <__aeabi_dmul+0x3a8>)
 8000c7a:	4461      	add	r1, ip
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	dd56      	ble.n	8000d2e <__aeabi_dmul+0x3c2>
 8000c80:	076b      	lsls	r3, r5, #29
 8000c82:	d009      	beq.n	8000c98 <__aeabi_dmul+0x32c>
 8000c84:	220f      	movs	r2, #15
 8000c86:	402a      	ands	r2, r5
 8000c88:	2a04      	cmp	r2, #4
 8000c8a:	d005      	beq.n	8000c98 <__aeabi_dmul+0x32c>
 8000c8c:	1d2a      	adds	r2, r5, #4
 8000c8e:	42aa      	cmp	r2, r5
 8000c90:	41ad      	sbcs	r5, r5
 8000c92:	426d      	negs	r5, r5
 8000c94:	1964      	adds	r4, r4, r5
 8000c96:	0015      	movs	r5, r2
 8000c98:	01e3      	lsls	r3, r4, #7
 8000c9a:	d504      	bpl.n	8000ca6 <__aeabi_dmul+0x33a>
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <__aeabi_dmul+0x3ac>)
 8000ca0:	00c9      	lsls	r1, r1, #3
 8000ca2:	4014      	ands	r4, r2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <__aeabi_dmul+0x3b0>)
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	dd00      	ble.n	8000cae <__aeabi_dmul+0x342>
 8000cac:	e724      	b.n	8000af8 <__aeabi_dmul+0x18c>
 8000cae:	0762      	lsls	r2, r4, #29
 8000cb0:	08ed      	lsrs	r5, r5, #3
 8000cb2:	0264      	lsls	r4, r4, #9
 8000cb4:	0549      	lsls	r1, r1, #21
 8000cb6:	4315      	orrs	r5, r2
 8000cb8:	0b24      	lsrs	r4, r4, #12
 8000cba:	0d4a      	lsrs	r2, r1, #21
 8000cbc:	e6c6      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000cbe:	9701      	str	r7, [sp, #4]
 8000cc0:	e6b8      	b.n	8000a34 <__aeabi_dmul+0xc8>
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <__aeabi_dmul+0x398>)
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	4694      	mov	ip, r2
 8000cc8:	4463      	add	r3, ip
 8000cca:	464a      	mov	r2, r9
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2303      	movs	r3, #3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	4652      	mov	r2, sl
 8000cd6:	e68a      	b.n	80009ee <__aeabi_dmul+0x82>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	2301      	movs	r3, #1
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	4689      	mov	r9, r1
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	e683      	b.n	80009ee <__aeabi_dmul+0x82>
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2303      	movs	r3, #3
 8000cec:	0005      	movs	r5, r0
 8000cee:	4691      	mov	r9, r2
 8000cf0:	469b      	mov	fp, r3
 8000cf2:	e65e      	b.n	80009b2 <__aeabi_dmul+0x46>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	2400      	movs	r4, #0
 8000d00:	469b      	mov	fp, r3
 8000d02:	e656      	b.n	80009b2 <__aeabi_dmul+0x46>
 8000d04:	000007ff 	.word	0x000007ff
 8000d08:	fffffc01 	.word	0xfffffc01
 8000d0c:	080047fc 	.word	0x080047fc
 8000d10:	fffffc0d 	.word	0xfffffc0d
 8000d14:	000003ff 	.word	0x000003ff
 8000d18:	feffffff 	.word	0xfeffffff
 8000d1c:	000007fe 	.word	0x000007fe
 8000d20:	2300      	movs	r3, #0
 8000d22:	2480      	movs	r4, #128	; 0x80
 8000d24:	2500      	movs	r5, #0
 8000d26:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <__aeabi_dmul+0x4cc>)
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	0324      	lsls	r4, r4, #12
 8000d2c:	e68e      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	1a40      	subs	r0, r0, r1
 8000d32:	2838      	cmp	r0, #56	; 0x38
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_dmul+0x3cc>
 8000d36:	e686      	b.n	8000a46 <__aeabi_dmul+0xda>
 8000d38:	281f      	cmp	r0, #31
 8000d3a:	dd5b      	ble.n	8000df4 <__aeabi_dmul+0x488>
 8000d3c:	221f      	movs	r2, #31
 8000d3e:	0023      	movs	r3, r4
 8000d40:	4252      	negs	r2, r2
 8000d42:	1a51      	subs	r1, r2, r1
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	0019      	movs	r1, r3
 8000d48:	2820      	cmp	r0, #32
 8000d4a:	d003      	beq.n	8000d54 <__aeabi_dmul+0x3e8>
 8000d4c:	4a3b      	ldr	r2, [pc, #236]	; (8000e3c <__aeabi_dmul+0x4d0>)
 8000d4e:	4462      	add	r2, ip
 8000d50:	4094      	lsls	r4, r2
 8000d52:	4325      	orrs	r5, r4
 8000d54:	1e6a      	subs	r2, r5, #1
 8000d56:	4195      	sbcs	r5, r2
 8000d58:	002a      	movs	r2, r5
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	000d      	movs	r5, r1
 8000d60:	2400      	movs	r4, #0
 8000d62:	4015      	ands	r5, r2
 8000d64:	4211      	tst	r1, r2
 8000d66:	d05b      	beq.n	8000e20 <__aeabi_dmul+0x4b4>
 8000d68:	210f      	movs	r1, #15
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	4011      	ands	r1, r2
 8000d6e:	2904      	cmp	r1, #4
 8000d70:	d053      	beq.n	8000e1a <__aeabi_dmul+0x4ae>
 8000d72:	1d11      	adds	r1, r2, #4
 8000d74:	4291      	cmp	r1, r2
 8000d76:	4192      	sbcs	r2, r2
 8000d78:	4252      	negs	r2, r2
 8000d7a:	18a4      	adds	r4, r4, r2
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	0223      	lsls	r3, r4, #8
 8000d80:	d54b      	bpl.n	8000e1a <__aeabi_dmul+0x4ae>
 8000d82:	2201      	movs	r2, #1
 8000d84:	2400      	movs	r4, #0
 8000d86:	2500      	movs	r5, #0
 8000d88:	e660      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	031b      	lsls	r3, r3, #12
 8000d8e:	421c      	tst	r4, r3
 8000d90:	d009      	beq.n	8000da6 <__aeabi_dmul+0x43a>
 8000d92:	421e      	tst	r6, r3
 8000d94:	d107      	bne.n	8000da6 <__aeabi_dmul+0x43a>
 8000d96:	4333      	orrs	r3, r6
 8000d98:	031c      	lsls	r4, r3, #12
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	0015      	movs	r5, r2
 8000d9e:	0b24      	lsrs	r4, r4, #12
 8000da0:	4a25      	ldr	r2, [pc, #148]	; (8000e38 <__aeabi_dmul+0x4cc>)
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	e652      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	0312      	lsls	r2, r2, #12
 8000daa:	4314      	orrs	r4, r2
 8000dac:	0324      	lsls	r4, r4, #12
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <__aeabi_dmul+0x4cc>)
 8000db0:	0b24      	lsrs	r4, r4, #12
 8000db2:	9701      	str	r7, [sp, #4]
 8000db4:	e64a      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000db6:	f000 fc55 	bl	8001664 <__clzsi2>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	3215      	adds	r2, #21
 8000dc0:	3020      	adds	r0, #32
 8000dc2:	2a1c      	cmp	r2, #28
 8000dc4:	dc00      	bgt.n	8000dc8 <__aeabi_dmul+0x45c>
 8000dc6:	e684      	b.n	8000ad2 <__aeabi_dmul+0x166>
 8000dc8:	4656      	mov	r6, sl
 8000dca:	3b08      	subs	r3, #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	409e      	lsls	r6, r3
 8000dd0:	e689      	b.n	8000ae6 <__aeabi_dmul+0x17a>
 8000dd2:	f000 fc47 	bl	8001664 <__clzsi2>
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	0002      	movs	r2, r0
 8000dda:	3115      	adds	r1, #21
 8000ddc:	3220      	adds	r2, #32
 8000dde:	291c      	cmp	r1, #28
 8000de0:	dc00      	bgt.n	8000de4 <__aeabi_dmul+0x478>
 8000de2:	e64e      	b.n	8000a82 <__aeabi_dmul+0x116>
 8000de4:	0034      	movs	r4, r6
 8000de6:	3808      	subs	r0, #8
 8000de8:	2500      	movs	r5, #0
 8000dea:	4084      	lsls	r4, r0
 8000dec:	e653      	b.n	8000a96 <__aeabi_dmul+0x12a>
 8000dee:	9b00      	ldr	r3, [sp, #0]
 8000df0:	469c      	mov	ip, r3
 8000df2:	e741      	b.n	8000c78 <__aeabi_dmul+0x30c>
 8000df4:	4912      	ldr	r1, [pc, #72]	; (8000e40 <__aeabi_dmul+0x4d4>)
 8000df6:	0022      	movs	r2, r4
 8000df8:	4461      	add	r1, ip
 8000dfa:	002e      	movs	r6, r5
 8000dfc:	408d      	lsls	r5, r1
 8000dfe:	408a      	lsls	r2, r1
 8000e00:	40c6      	lsrs	r6, r0
 8000e02:	1e69      	subs	r1, r5, #1
 8000e04:	418d      	sbcs	r5, r1
 8000e06:	4332      	orrs	r2, r6
 8000e08:	432a      	orrs	r2, r5
 8000e0a:	40c4      	lsrs	r4, r0
 8000e0c:	0753      	lsls	r3, r2, #29
 8000e0e:	d0b6      	beq.n	8000d7e <__aeabi_dmul+0x412>
 8000e10:	210f      	movs	r1, #15
 8000e12:	4011      	ands	r1, r2
 8000e14:	2904      	cmp	r1, #4
 8000e16:	d1ac      	bne.n	8000d72 <__aeabi_dmul+0x406>
 8000e18:	e7b1      	b.n	8000d7e <__aeabi_dmul+0x412>
 8000e1a:	0765      	lsls	r5, r4, #29
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	08d2      	lsrs	r2, r2, #3
 8000e22:	4315      	orrs	r5, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e611      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	0312      	lsls	r2, r2, #12
 8000e2c:	4314      	orrs	r4, r2
 8000e2e:	0324      	lsls	r4, r4, #12
 8000e30:	4a01      	ldr	r2, [pc, #4]	; (8000e38 <__aeabi_dmul+0x4cc>)
 8000e32:	0b24      	lsrs	r4, r4, #12
 8000e34:	e60a      	b.n	8000a4c <__aeabi_dmul+0xe0>
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	000007ff 	.word	0x000007ff
 8000e3c:	0000043e 	.word	0x0000043e
 8000e40:	0000041e 	.word	0x0000041e

08000e44 <__aeabi_dsub>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	4657      	mov	r7, sl
 8000e48:	464e      	mov	r6, r9
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	46de      	mov	lr, fp
 8000e4e:	0004      	movs	r4, r0
 8000e50:	b5e0      	push	{r5, r6, r7, lr}
 8000e52:	001f      	movs	r7, r3
 8000e54:	0010      	movs	r0, r2
 8000e56:	030b      	lsls	r3, r1, #12
 8000e58:	0f62      	lsrs	r2, r4, #29
 8000e5a:	004e      	lsls	r6, r1, #1
 8000e5c:	0fcd      	lsrs	r5, r1, #31
 8000e5e:	0a5b      	lsrs	r3, r3, #9
 8000e60:	0339      	lsls	r1, r7, #12
 8000e62:	4313      	orrs	r3, r2
 8000e64:	0a49      	lsrs	r1, r1, #9
 8000e66:	00e2      	lsls	r2, r4, #3
 8000e68:	0f44      	lsrs	r4, r0, #29
 8000e6a:	4321      	orrs	r1, r4
 8000e6c:	4cc2      	ldr	r4, [pc, #776]	; (8001178 <__aeabi_dsub+0x334>)
 8000e6e:	4691      	mov	r9, r2
 8000e70:	4692      	mov	sl, r2
 8000e72:	00c0      	lsls	r0, r0, #3
 8000e74:	007a      	lsls	r2, r7, #1
 8000e76:	4680      	mov	r8, r0
 8000e78:	0d76      	lsrs	r6, r6, #21
 8000e7a:	0d52      	lsrs	r2, r2, #21
 8000e7c:	0fff      	lsrs	r7, r7, #31
 8000e7e:	42a2      	cmp	r2, r4
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dsub+0x40>
 8000e82:	e0b4      	b.n	8000fee <__aeabi_dsub+0x1aa>
 8000e84:	2401      	movs	r4, #1
 8000e86:	4067      	eors	r7, r4
 8000e88:	46bb      	mov	fp, r7
 8000e8a:	42bd      	cmp	r5, r7
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dsub+0x4c>
 8000e8e:	e088      	b.n	8000fa2 <__aeabi_dsub+0x15e>
 8000e90:	1ab4      	subs	r4, r6, r2
 8000e92:	46a4      	mov	ip, r4
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_dsub+0x56>
 8000e98:	e0b2      	b.n	8001000 <__aeabi_dsub+0x1bc>
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x5c>
 8000e9e:	e0c5      	b.n	800102c <__aeabi_dsub+0x1e8>
 8000ea0:	4ab5      	ldr	r2, [pc, #724]	; (8001178 <__aeabi_dsub+0x334>)
 8000ea2:	4296      	cmp	r6, r2
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dsub+0x64>
 8000ea6:	e28b      	b.n	80013c0 <__aeabi_dsub+0x57c>
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	0412      	lsls	r2, r2, #16
 8000eac:	4311      	orrs	r1, r2
 8000eae:	4662      	mov	r2, ip
 8000eb0:	2a38      	cmp	r2, #56	; 0x38
 8000eb2:	dd00      	ble.n	8000eb6 <__aeabi_dsub+0x72>
 8000eb4:	e1a1      	b.n	80011fa <__aeabi_dsub+0x3b6>
 8000eb6:	2a1f      	cmp	r2, #31
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_dsub+0x78>
 8000eba:	e216      	b.n	80012ea <__aeabi_dsub+0x4a6>
 8000ebc:	2720      	movs	r7, #32
 8000ebe:	000c      	movs	r4, r1
 8000ec0:	1abf      	subs	r7, r7, r2
 8000ec2:	40bc      	lsls	r4, r7
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	46a0      	mov	r8, r4
 8000ec8:	4664      	mov	r4, ip
 8000eca:	40b8      	lsls	r0, r7
 8000ecc:	40e2      	lsrs	r2, r4
 8000ece:	4644      	mov	r4, r8
 8000ed0:	4314      	orrs	r4, r2
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	1e50      	subs	r0, r2, #1
 8000ed6:	4182      	sbcs	r2, r0
 8000ed8:	4660      	mov	r0, ip
 8000eda:	40c1      	lsrs	r1, r0
 8000edc:	4322      	orrs	r2, r4
 8000ede:	1a5b      	subs	r3, r3, r1
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	1a8c      	subs	r4, r1, r2
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	4192      	sbcs	r2, r2
 8000ee8:	4252      	negs	r2, r2
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	4698      	mov	r8, r3
 8000eee:	4643      	mov	r3, r8
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	d400      	bmi.n	8000ef6 <__aeabi_dsub+0xb2>
 8000ef4:	e117      	b.n	8001126 <__aeabi_dsub+0x2e2>
 8000ef6:	4643      	mov	r3, r8
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	0a5b      	lsrs	r3, r3, #9
 8000efc:	4698      	mov	r8, r3
 8000efe:	4643      	mov	r3, r8
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dsub+0xc2>
 8000f04:	e16c      	b.n	80011e0 <__aeabi_dsub+0x39c>
 8000f06:	4640      	mov	r0, r8
 8000f08:	f000 fbac 	bl	8001664 <__clzsi2>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	3a08      	subs	r2, #8
 8000f10:	2120      	movs	r1, #32
 8000f12:	0020      	movs	r0, r4
 8000f14:	4643      	mov	r3, r8
 8000f16:	1a89      	subs	r1, r1, r2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	40c8      	lsrs	r0, r1
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	4303      	orrs	r3, r0
 8000f20:	4296      	cmp	r6, r2
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_dsub+0xe2>
 8000f24:	e157      	b.n	80011d6 <__aeabi_dsub+0x392>
 8000f26:	1b96      	subs	r6, r2, r6
 8000f28:	1c71      	adds	r1, r6, #1
 8000f2a:	291f      	cmp	r1, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dsub+0xec>
 8000f2e:	e1cb      	b.n	80012c8 <__aeabi_dsub+0x484>
 8000f30:	2220      	movs	r2, #32
 8000f32:	0018      	movs	r0, r3
 8000f34:	0026      	movs	r6, r4
 8000f36:	1a52      	subs	r2, r2, r1
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	4090      	lsls	r0, r2
 8000f3c:	40ce      	lsrs	r6, r1
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	1e62      	subs	r2, r4, #1
 8000f42:	4194      	sbcs	r4, r2
 8000f44:	4330      	orrs	r0, r6
 8000f46:	4698      	mov	r8, r3
 8000f48:	2600      	movs	r6, #0
 8000f4a:	4304      	orrs	r4, r0
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d009      	beq.n	8000f64 <__aeabi_dsub+0x120>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <__aeabi_dsub+0x120>
 8000f58:	1d23      	adds	r3, r4, #4
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	41a4      	sbcs	r4, r4
 8000f5e:	4264      	negs	r4, r4
 8000f60:	44a0      	add	r8, r4
 8000f62:	001c      	movs	r4, r3
 8000f64:	4643      	mov	r3, r8
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	d400      	bmi.n	8000f6c <__aeabi_dsub+0x128>
 8000f6a:	e0df      	b.n	800112c <__aeabi_dsub+0x2e8>
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <__aeabi_dsub+0x334>)
 8000f6e:	3601      	adds	r6, #1
 8000f70:	429e      	cmp	r6, r3
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dsub+0x132>
 8000f74:	e0fb      	b.n	800116e <__aeabi_dsub+0x32a>
 8000f76:	4642      	mov	r2, r8
 8000f78:	4b80      	ldr	r3, [pc, #512]	; (800117c <__aeabi_dsub+0x338>)
 8000f7a:	08e4      	lsrs	r4, r4, #3
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	0571      	lsls	r1, r6, #21
 8000f82:	0752      	lsls	r2, r2, #29
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	4322      	orrs	r2, r4
 8000f88:	0b1b      	lsrs	r3, r3, #12
 8000f8a:	0d49      	lsrs	r1, r1, #21
 8000f8c:	0509      	lsls	r1, r1, #20
 8000f8e:	07ed      	lsls	r5, r5, #31
 8000f90:	4319      	orrs	r1, r3
 8000f92:	4329      	orrs	r1, r5
 8000f94:	0010      	movs	r0, r2
 8000f96:	bcf0      	pop	{r4, r5, r6, r7}
 8000f98:	46bb      	mov	fp, r7
 8000f9a:	46b2      	mov	sl, r6
 8000f9c:	46a9      	mov	r9, r5
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fa2:	1ab4      	subs	r4, r6, r2
 8000fa4:	46a4      	mov	ip, r4
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	dd58      	ble.n	800105c <__aeabi_dsub+0x218>
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dsub+0x16c>
 8000fae:	e09e      	b.n	80010ee <__aeabi_dsub+0x2aa>
 8000fb0:	4a71      	ldr	r2, [pc, #452]	; (8001178 <__aeabi_dsub+0x334>)
 8000fb2:	4296      	cmp	r6, r2
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dsub+0x174>
 8000fb6:	e13b      	b.n	8001230 <__aeabi_dsub+0x3ec>
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0412      	lsls	r2, r2, #16
 8000fbc:	4311      	orrs	r1, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a38      	cmp	r2, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_dsub+0x182>
 8000fc4:	e0c1      	b.n	800114a <__aeabi_dsub+0x306>
 8000fc6:	2a1f      	cmp	r2, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_dsub+0x188>
 8000fca:	e1bb      	b.n	8001344 <__aeabi_dsub+0x500>
 8000fcc:	000c      	movs	r4, r1
 8000fce:	3a20      	subs	r2, #32
 8000fd0:	40d4      	lsrs	r4, r2
 8000fd2:	0022      	movs	r2, r4
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	2c20      	cmp	r4, #32
 8000fd8:	d004      	beq.n	8000fe4 <__aeabi_dsub+0x1a0>
 8000fda:	2740      	movs	r7, #64	; 0x40
 8000fdc:	1b3f      	subs	r7, r7, r4
 8000fde:	40b9      	lsls	r1, r7
 8000fe0:	4308      	orrs	r0, r1
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1e61      	subs	r1, r4, #1
 8000fe8:	418c      	sbcs	r4, r1
 8000fea:	4314      	orrs	r4, r2
 8000fec:	e0b1      	b.n	8001152 <__aeabi_dsub+0x30e>
 8000fee:	000c      	movs	r4, r1
 8000ff0:	4304      	orrs	r4, r0
 8000ff2:	d02a      	beq.n	800104a <__aeabi_dsub+0x206>
 8000ff4:	46bb      	mov	fp, r7
 8000ff6:	42bd      	cmp	r5, r7
 8000ff8:	d02d      	beq.n	8001056 <__aeabi_dsub+0x212>
 8000ffa:	4c61      	ldr	r4, [pc, #388]	; (8001180 <__aeabi_dsub+0x33c>)
 8000ffc:	46a4      	mov	ip, r4
 8000ffe:	44b4      	add	ip, r6
 8001000:	4664      	mov	r4, ip
 8001002:	2c00      	cmp	r4, #0
 8001004:	d05c      	beq.n	80010c0 <__aeabi_dsub+0x27c>
 8001006:	1b94      	subs	r4, r2, r6
 8001008:	46a4      	mov	ip, r4
 800100a:	2e00      	cmp	r6, #0
 800100c:	d000      	beq.n	8001010 <__aeabi_dsub+0x1cc>
 800100e:	e115      	b.n	800123c <__aeabi_dsub+0x3f8>
 8001010:	464d      	mov	r5, r9
 8001012:	431d      	orrs	r5, r3
 8001014:	d100      	bne.n	8001018 <__aeabi_dsub+0x1d4>
 8001016:	e1c3      	b.n	80013a0 <__aeabi_dsub+0x55c>
 8001018:	1e65      	subs	r5, r4, #1
 800101a:	2c01      	cmp	r4, #1
 800101c:	d100      	bne.n	8001020 <__aeabi_dsub+0x1dc>
 800101e:	e20c      	b.n	800143a <__aeabi_dsub+0x5f6>
 8001020:	4e55      	ldr	r6, [pc, #340]	; (8001178 <__aeabi_dsub+0x334>)
 8001022:	42b4      	cmp	r4, r6
 8001024:	d100      	bne.n	8001028 <__aeabi_dsub+0x1e4>
 8001026:	e1f8      	b.n	800141a <__aeabi_dsub+0x5d6>
 8001028:	46ac      	mov	ip, r5
 800102a:	e10e      	b.n	800124a <__aeabi_dsub+0x406>
 800102c:	000a      	movs	r2, r1
 800102e:	4302      	orrs	r2, r0
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x1f0>
 8001032:	e136      	b.n	80012a2 <__aeabi_dsub+0x45e>
 8001034:	0022      	movs	r2, r4
 8001036:	3a01      	subs	r2, #1
 8001038:	2c01      	cmp	r4, #1
 800103a:	d100      	bne.n	800103e <__aeabi_dsub+0x1fa>
 800103c:	e1c6      	b.n	80013cc <__aeabi_dsub+0x588>
 800103e:	4c4e      	ldr	r4, [pc, #312]	; (8001178 <__aeabi_dsub+0x334>)
 8001040:	45a4      	cmp	ip, r4
 8001042:	d100      	bne.n	8001046 <__aeabi_dsub+0x202>
 8001044:	e0f4      	b.n	8001230 <__aeabi_dsub+0x3ec>
 8001046:	4694      	mov	ip, r2
 8001048:	e731      	b.n	8000eae <__aeabi_dsub+0x6a>
 800104a:	2401      	movs	r4, #1
 800104c:	4067      	eors	r7, r4
 800104e:	46bb      	mov	fp, r7
 8001050:	42bd      	cmp	r5, r7
 8001052:	d000      	beq.n	8001056 <__aeabi_dsub+0x212>
 8001054:	e71c      	b.n	8000e90 <__aeabi_dsub+0x4c>
 8001056:	4c4a      	ldr	r4, [pc, #296]	; (8001180 <__aeabi_dsub+0x33c>)
 8001058:	46a4      	mov	ip, r4
 800105a:	44b4      	add	ip, r6
 800105c:	4664      	mov	r4, ip
 800105e:	2c00      	cmp	r4, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_dsub+0x220>
 8001062:	e0cf      	b.n	8001204 <__aeabi_dsub+0x3c0>
 8001064:	1b94      	subs	r4, r2, r6
 8001066:	46a4      	mov	ip, r4
 8001068:	2e00      	cmp	r6, #0
 800106a:	d100      	bne.n	800106e <__aeabi_dsub+0x22a>
 800106c:	e15c      	b.n	8001328 <__aeabi_dsub+0x4e4>
 800106e:	4e42      	ldr	r6, [pc, #264]	; (8001178 <__aeabi_dsub+0x334>)
 8001070:	42b2      	cmp	r2, r6
 8001072:	d100      	bne.n	8001076 <__aeabi_dsub+0x232>
 8001074:	e1ec      	b.n	8001450 <__aeabi_dsub+0x60c>
 8001076:	2680      	movs	r6, #128	; 0x80
 8001078:	0436      	lsls	r6, r6, #16
 800107a:	4333      	orrs	r3, r6
 800107c:	4664      	mov	r4, ip
 800107e:	2c38      	cmp	r4, #56	; 0x38
 8001080:	dd00      	ble.n	8001084 <__aeabi_dsub+0x240>
 8001082:	e1b3      	b.n	80013ec <__aeabi_dsub+0x5a8>
 8001084:	2c1f      	cmp	r4, #31
 8001086:	dd00      	ble.n	800108a <__aeabi_dsub+0x246>
 8001088:	e238      	b.n	80014fc <__aeabi_dsub+0x6b8>
 800108a:	2620      	movs	r6, #32
 800108c:	1b36      	subs	r6, r6, r4
 800108e:	001c      	movs	r4, r3
 8001090:	40b4      	lsls	r4, r6
 8001092:	464f      	mov	r7, r9
 8001094:	46a0      	mov	r8, r4
 8001096:	4664      	mov	r4, ip
 8001098:	40e7      	lsrs	r7, r4
 800109a:	4644      	mov	r4, r8
 800109c:	433c      	orrs	r4, r7
 800109e:	464f      	mov	r7, r9
 80010a0:	40b7      	lsls	r7, r6
 80010a2:	003e      	movs	r6, r7
 80010a4:	1e77      	subs	r7, r6, #1
 80010a6:	41be      	sbcs	r6, r7
 80010a8:	4334      	orrs	r4, r6
 80010aa:	4666      	mov	r6, ip
 80010ac:	40f3      	lsrs	r3, r6
 80010ae:	18c9      	adds	r1, r1, r3
 80010b0:	1824      	adds	r4, r4, r0
 80010b2:	4284      	cmp	r4, r0
 80010b4:	419b      	sbcs	r3, r3
 80010b6:	425b      	negs	r3, r3
 80010b8:	4698      	mov	r8, r3
 80010ba:	0016      	movs	r6, r2
 80010bc:	4488      	add	r8, r1
 80010be:	e04e      	b.n	800115e <__aeabi_dsub+0x31a>
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <__aeabi_dsub+0x340>)
 80010c2:	1c74      	adds	r4, r6, #1
 80010c4:	4214      	tst	r4, r2
 80010c6:	d000      	beq.n	80010ca <__aeabi_dsub+0x286>
 80010c8:	e0d6      	b.n	8001278 <__aeabi_dsub+0x434>
 80010ca:	464a      	mov	r2, r9
 80010cc:	431a      	orrs	r2, r3
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d000      	beq.n	80010d4 <__aeabi_dsub+0x290>
 80010d2:	e15b      	b.n	800138c <__aeabi_dsub+0x548>
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dsub+0x296>
 80010d8:	e1a5      	b.n	8001426 <__aeabi_dsub+0x5e2>
 80010da:	000a      	movs	r2, r1
 80010dc:	4302      	orrs	r2, r0
 80010de:	d000      	beq.n	80010e2 <__aeabi_dsub+0x29e>
 80010e0:	e1bb      	b.n	800145a <__aeabi_dsub+0x616>
 80010e2:	464a      	mov	r2, r9
 80010e4:	0759      	lsls	r1, r3, #29
 80010e6:	08d2      	lsrs	r2, r2, #3
 80010e8:	430a      	orrs	r2, r1
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	e027      	b.n	800113e <__aeabi_dsub+0x2fa>
 80010ee:	000a      	movs	r2, r1
 80010f0:	4302      	orrs	r2, r0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dsub+0x2b2>
 80010f4:	e174      	b.n	80013e0 <__aeabi_dsub+0x59c>
 80010f6:	0022      	movs	r2, r4
 80010f8:	3a01      	subs	r2, #1
 80010fa:	2c01      	cmp	r4, #1
 80010fc:	d005      	beq.n	800110a <__aeabi_dsub+0x2c6>
 80010fe:	4c1e      	ldr	r4, [pc, #120]	; (8001178 <__aeabi_dsub+0x334>)
 8001100:	45a4      	cmp	ip, r4
 8001102:	d100      	bne.n	8001106 <__aeabi_dsub+0x2c2>
 8001104:	e094      	b.n	8001230 <__aeabi_dsub+0x3ec>
 8001106:	4694      	mov	ip, r2
 8001108:	e759      	b.n	8000fbe <__aeabi_dsub+0x17a>
 800110a:	4448      	add	r0, r9
 800110c:	4548      	cmp	r0, r9
 800110e:	4192      	sbcs	r2, r2
 8001110:	185b      	adds	r3, r3, r1
 8001112:	4698      	mov	r8, r3
 8001114:	0004      	movs	r4, r0
 8001116:	4252      	negs	r2, r2
 8001118:	4490      	add	r8, r2
 800111a:	4643      	mov	r3, r8
 800111c:	2602      	movs	r6, #2
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	d500      	bpl.n	8001124 <__aeabi_dsub+0x2e0>
 8001122:	e0c4      	b.n	80012ae <__aeabi_dsub+0x46a>
 8001124:	3e01      	subs	r6, #1
 8001126:	0763      	lsls	r3, r4, #29
 8001128:	d000      	beq.n	800112c <__aeabi_dsub+0x2e8>
 800112a:	e711      	b.n	8000f50 <__aeabi_dsub+0x10c>
 800112c:	4643      	mov	r3, r8
 800112e:	46b4      	mov	ip, r6
 8001130:	0759      	lsls	r1, r3, #29
 8001132:	08e2      	lsrs	r2, r4, #3
 8001134:	430a      	orrs	r2, r1
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	490f      	ldr	r1, [pc, #60]	; (8001178 <__aeabi_dsub+0x334>)
 800113a:	458c      	cmp	ip, r1
 800113c:	d040      	beq.n	80011c0 <__aeabi_dsub+0x37c>
 800113e:	4661      	mov	r1, ip
 8001140:	031b      	lsls	r3, r3, #12
 8001142:	0549      	lsls	r1, r1, #21
 8001144:	0b1b      	lsrs	r3, r3, #12
 8001146:	0d49      	lsrs	r1, r1, #21
 8001148:	e720      	b.n	8000f8c <__aeabi_dsub+0x148>
 800114a:	4301      	orrs	r1, r0
 800114c:	000c      	movs	r4, r1
 800114e:	1e61      	subs	r1, r4, #1
 8001150:	418c      	sbcs	r4, r1
 8001152:	444c      	add	r4, r9
 8001154:	454c      	cmp	r4, r9
 8001156:	4192      	sbcs	r2, r2
 8001158:	4252      	negs	r2, r2
 800115a:	4690      	mov	r8, r2
 800115c:	4498      	add	r8, r3
 800115e:	4643      	mov	r3, r8
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	d5e0      	bpl.n	8001126 <__aeabi_dsub+0x2e2>
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__aeabi_dsub+0x334>)
 8001166:	3601      	adds	r6, #1
 8001168:	429e      	cmp	r6, r3
 800116a:	d000      	beq.n	800116e <__aeabi_dsub+0x32a>
 800116c:	e09f      	b.n	80012ae <__aeabi_dsub+0x46a>
 800116e:	0031      	movs	r1, r6
 8001170:	2300      	movs	r3, #0
 8001172:	2200      	movs	r2, #0
 8001174:	e70a      	b.n	8000f8c <__aeabi_dsub+0x148>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	000007ff 	.word	0x000007ff
 800117c:	ff7fffff 	.word	0xff7fffff
 8001180:	fffff801 	.word	0xfffff801
 8001184:	000007fe 	.word	0x000007fe
 8001188:	2a00      	cmp	r2, #0
 800118a:	d100      	bne.n	800118e <__aeabi_dsub+0x34a>
 800118c:	e160      	b.n	8001450 <__aeabi_dsub+0x60c>
 800118e:	000a      	movs	r2, r1
 8001190:	4302      	orrs	r2, r0
 8001192:	d04d      	beq.n	8001230 <__aeabi_dsub+0x3ec>
 8001194:	464a      	mov	r2, r9
 8001196:	075c      	lsls	r4, r3, #29
 8001198:	08d2      	lsrs	r2, r2, #3
 800119a:	4322      	orrs	r2, r4
 800119c:	2480      	movs	r4, #128	; 0x80
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	0324      	lsls	r4, r4, #12
 80011a2:	4223      	tst	r3, r4
 80011a4:	d007      	beq.n	80011b6 <__aeabi_dsub+0x372>
 80011a6:	08ce      	lsrs	r6, r1, #3
 80011a8:	4226      	tst	r6, r4
 80011aa:	d104      	bne.n	80011b6 <__aeabi_dsub+0x372>
 80011ac:	465d      	mov	r5, fp
 80011ae:	0033      	movs	r3, r6
 80011b0:	08c2      	lsrs	r2, r0, #3
 80011b2:	0749      	lsls	r1, r1, #29
 80011b4:	430a      	orrs	r2, r1
 80011b6:	0f51      	lsrs	r1, r2, #29
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	08d2      	lsrs	r2, r2, #3
 80011bc:	0749      	lsls	r1, r1, #29
 80011be:	430a      	orrs	r2, r1
 80011c0:	0011      	movs	r1, r2
 80011c2:	4319      	orrs	r1, r3
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dsub+0x384>
 80011c6:	e1c8      	b.n	800155a <__aeabi_dsub+0x716>
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	0309      	lsls	r1, r1, #12
 80011cc:	430b      	orrs	r3, r1
 80011ce:	031b      	lsls	r3, r3, #12
 80011d0:	49d5      	ldr	r1, [pc, #852]	; (8001528 <__aeabi_dsub+0x6e4>)
 80011d2:	0b1b      	lsrs	r3, r3, #12
 80011d4:	e6da      	b.n	8000f8c <__aeabi_dsub+0x148>
 80011d6:	49d5      	ldr	r1, [pc, #852]	; (800152c <__aeabi_dsub+0x6e8>)
 80011d8:	1ab6      	subs	r6, r6, r2
 80011da:	400b      	ands	r3, r1
 80011dc:	4698      	mov	r8, r3
 80011de:	e6b5      	b.n	8000f4c <__aeabi_dsub+0x108>
 80011e0:	0020      	movs	r0, r4
 80011e2:	f000 fa3f 	bl	8001664 <__clzsi2>
 80011e6:	0002      	movs	r2, r0
 80011e8:	3218      	adds	r2, #24
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_dsub+0x3ac>
 80011ee:	e68f      	b.n	8000f10 <__aeabi_dsub+0xcc>
 80011f0:	0023      	movs	r3, r4
 80011f2:	3808      	subs	r0, #8
 80011f4:	4083      	lsls	r3, r0
 80011f6:	2400      	movs	r4, #0
 80011f8:	e692      	b.n	8000f20 <__aeabi_dsub+0xdc>
 80011fa:	4308      	orrs	r0, r1
 80011fc:	0002      	movs	r2, r0
 80011fe:	1e50      	subs	r0, r2, #1
 8001200:	4182      	sbcs	r2, r0
 8001202:	e66d      	b.n	8000ee0 <__aeabi_dsub+0x9c>
 8001204:	4cca      	ldr	r4, [pc, #808]	; (8001530 <__aeabi_dsub+0x6ec>)
 8001206:	1c72      	adds	r2, r6, #1
 8001208:	4222      	tst	r2, r4
 800120a:	d000      	beq.n	800120e <__aeabi_dsub+0x3ca>
 800120c:	e0ad      	b.n	800136a <__aeabi_dsub+0x526>
 800120e:	464a      	mov	r2, r9
 8001210:	431a      	orrs	r2, r3
 8001212:	2e00      	cmp	r6, #0
 8001214:	d1b8      	bne.n	8001188 <__aeabi_dsub+0x344>
 8001216:	2a00      	cmp	r2, #0
 8001218:	d100      	bne.n	800121c <__aeabi_dsub+0x3d8>
 800121a:	e158      	b.n	80014ce <__aeabi_dsub+0x68a>
 800121c:	000a      	movs	r2, r1
 800121e:	4302      	orrs	r2, r0
 8001220:	d000      	beq.n	8001224 <__aeabi_dsub+0x3e0>
 8001222:	e159      	b.n	80014d8 <__aeabi_dsub+0x694>
 8001224:	464a      	mov	r2, r9
 8001226:	0759      	lsls	r1, r3, #29
 8001228:	08d2      	lsrs	r2, r2, #3
 800122a:	430a      	orrs	r2, r1
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	e786      	b.n	800113e <__aeabi_dsub+0x2fa>
 8001230:	464a      	mov	r2, r9
 8001232:	0759      	lsls	r1, r3, #29
 8001234:	08d2      	lsrs	r2, r2, #3
 8001236:	430a      	orrs	r2, r1
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	e7c1      	b.n	80011c0 <__aeabi_dsub+0x37c>
 800123c:	4dba      	ldr	r5, [pc, #744]	; (8001528 <__aeabi_dsub+0x6e4>)
 800123e:	42aa      	cmp	r2, r5
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x400>
 8001242:	e11e      	b.n	8001482 <__aeabi_dsub+0x63e>
 8001244:	2580      	movs	r5, #128	; 0x80
 8001246:	042d      	lsls	r5, r5, #16
 8001248:	432b      	orrs	r3, r5
 800124a:	4664      	mov	r4, ip
 800124c:	2c38      	cmp	r4, #56	; 0x38
 800124e:	dc5d      	bgt.n	800130c <__aeabi_dsub+0x4c8>
 8001250:	2c1f      	cmp	r4, #31
 8001252:	dd00      	ble.n	8001256 <__aeabi_dsub+0x412>
 8001254:	e0d0      	b.n	80013f8 <__aeabi_dsub+0x5b4>
 8001256:	2520      	movs	r5, #32
 8001258:	4667      	mov	r7, ip
 800125a:	1b2d      	subs	r5, r5, r4
 800125c:	464e      	mov	r6, r9
 800125e:	001c      	movs	r4, r3
 8001260:	40fe      	lsrs	r6, r7
 8001262:	40ac      	lsls	r4, r5
 8001264:	4334      	orrs	r4, r6
 8001266:	464e      	mov	r6, r9
 8001268:	40ae      	lsls	r6, r5
 800126a:	0035      	movs	r5, r6
 800126c:	40fb      	lsrs	r3, r7
 800126e:	1e6e      	subs	r6, r5, #1
 8001270:	41b5      	sbcs	r5, r6
 8001272:	1ac9      	subs	r1, r1, r3
 8001274:	432c      	orrs	r4, r5
 8001276:	e04e      	b.n	8001316 <__aeabi_dsub+0x4d2>
 8001278:	464a      	mov	r2, r9
 800127a:	1a14      	subs	r4, r2, r0
 800127c:	45a1      	cmp	r9, r4
 800127e:	4192      	sbcs	r2, r2
 8001280:	4252      	negs	r2, r2
 8001282:	4690      	mov	r8, r2
 8001284:	1a5f      	subs	r7, r3, r1
 8001286:	003a      	movs	r2, r7
 8001288:	4647      	mov	r7, r8
 800128a:	1bd2      	subs	r2, r2, r7
 800128c:	4690      	mov	r8, r2
 800128e:	0212      	lsls	r2, r2, #8
 8001290:	d500      	bpl.n	8001294 <__aeabi_dsub+0x450>
 8001292:	e08b      	b.n	80013ac <__aeabi_dsub+0x568>
 8001294:	4642      	mov	r2, r8
 8001296:	4322      	orrs	r2, r4
 8001298:	d000      	beq.n	800129c <__aeabi_dsub+0x458>
 800129a:	e630      	b.n	8000efe <__aeabi_dsub+0xba>
 800129c:	2300      	movs	r3, #0
 800129e:	2500      	movs	r5, #0
 80012a0:	e74d      	b.n	800113e <__aeabi_dsub+0x2fa>
 80012a2:	464a      	mov	r2, r9
 80012a4:	0759      	lsls	r1, r3, #29
 80012a6:	08d2      	lsrs	r2, r2, #3
 80012a8:	430a      	orrs	r2, r1
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	e744      	b.n	8001138 <__aeabi_dsub+0x2f4>
 80012ae:	4642      	mov	r2, r8
 80012b0:	4b9e      	ldr	r3, [pc, #632]	; (800152c <__aeabi_dsub+0x6e8>)
 80012b2:	0861      	lsrs	r1, r4, #1
 80012b4:	401a      	ands	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	4014      	ands	r4, r2
 80012bc:	430c      	orrs	r4, r1
 80012be:	07da      	lsls	r2, r3, #31
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	4698      	mov	r8, r3
 80012c4:	4314      	orrs	r4, r2
 80012c6:	e641      	b.n	8000f4c <__aeabi_dsub+0x108>
 80012c8:	001a      	movs	r2, r3
 80012ca:	3e1f      	subs	r6, #31
 80012cc:	40f2      	lsrs	r2, r6
 80012ce:	0016      	movs	r6, r2
 80012d0:	2920      	cmp	r1, #32
 80012d2:	d003      	beq.n	80012dc <__aeabi_dsub+0x498>
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	1a51      	subs	r1, r2, r1
 80012d8:	408b      	lsls	r3, r1
 80012da:	431c      	orrs	r4, r3
 80012dc:	1e62      	subs	r2, r4, #1
 80012de:	4194      	sbcs	r4, r2
 80012e0:	2300      	movs	r3, #0
 80012e2:	4334      	orrs	r4, r6
 80012e4:	4698      	mov	r8, r3
 80012e6:	2600      	movs	r6, #0
 80012e8:	e71d      	b.n	8001126 <__aeabi_dsub+0x2e2>
 80012ea:	000c      	movs	r4, r1
 80012ec:	3a20      	subs	r2, #32
 80012ee:	40d4      	lsrs	r4, r2
 80012f0:	0022      	movs	r2, r4
 80012f2:	4664      	mov	r4, ip
 80012f4:	2c20      	cmp	r4, #32
 80012f6:	d004      	beq.n	8001302 <__aeabi_dsub+0x4be>
 80012f8:	2740      	movs	r7, #64	; 0x40
 80012fa:	1b3f      	subs	r7, r7, r4
 80012fc:	40b9      	lsls	r1, r7
 80012fe:	4308      	orrs	r0, r1
 8001300:	4680      	mov	r8, r0
 8001302:	4644      	mov	r4, r8
 8001304:	1e61      	subs	r1, r4, #1
 8001306:	418c      	sbcs	r4, r1
 8001308:	4322      	orrs	r2, r4
 800130a:	e5e9      	b.n	8000ee0 <__aeabi_dsub+0x9c>
 800130c:	464c      	mov	r4, r9
 800130e:	4323      	orrs	r3, r4
 8001310:	001c      	movs	r4, r3
 8001312:	1e63      	subs	r3, r4, #1
 8001314:	419c      	sbcs	r4, r3
 8001316:	1b04      	subs	r4, r0, r4
 8001318:	42a0      	cmp	r0, r4
 800131a:	419b      	sbcs	r3, r3
 800131c:	425b      	negs	r3, r3
 800131e:	1acb      	subs	r3, r1, r3
 8001320:	4698      	mov	r8, r3
 8001322:	465d      	mov	r5, fp
 8001324:	0016      	movs	r6, r2
 8001326:	e5e2      	b.n	8000eee <__aeabi_dsub+0xaa>
 8001328:	464e      	mov	r6, r9
 800132a:	431e      	orrs	r6, r3
 800132c:	d100      	bne.n	8001330 <__aeabi_dsub+0x4ec>
 800132e:	e0ae      	b.n	800148e <__aeabi_dsub+0x64a>
 8001330:	1e66      	subs	r6, r4, #1
 8001332:	2c01      	cmp	r4, #1
 8001334:	d100      	bne.n	8001338 <__aeabi_dsub+0x4f4>
 8001336:	e0fd      	b.n	8001534 <__aeabi_dsub+0x6f0>
 8001338:	4f7b      	ldr	r7, [pc, #492]	; (8001528 <__aeabi_dsub+0x6e4>)
 800133a:	42bc      	cmp	r4, r7
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x4fc>
 800133e:	e107      	b.n	8001550 <__aeabi_dsub+0x70c>
 8001340:	46b4      	mov	ip, r6
 8001342:	e69b      	b.n	800107c <__aeabi_dsub+0x238>
 8001344:	4664      	mov	r4, ip
 8001346:	2220      	movs	r2, #32
 8001348:	1b12      	subs	r2, r2, r4
 800134a:	000c      	movs	r4, r1
 800134c:	4094      	lsls	r4, r2
 800134e:	0007      	movs	r7, r0
 8001350:	4090      	lsls	r0, r2
 8001352:	46a0      	mov	r8, r4
 8001354:	4664      	mov	r4, ip
 8001356:	1e42      	subs	r2, r0, #1
 8001358:	4190      	sbcs	r0, r2
 800135a:	4662      	mov	r2, ip
 800135c:	40e7      	lsrs	r7, r4
 800135e:	4644      	mov	r4, r8
 8001360:	40d1      	lsrs	r1, r2
 8001362:	433c      	orrs	r4, r7
 8001364:	4304      	orrs	r4, r0
 8001366:	185b      	adds	r3, r3, r1
 8001368:	e6f3      	b.n	8001152 <__aeabi_dsub+0x30e>
 800136a:	4c6f      	ldr	r4, [pc, #444]	; (8001528 <__aeabi_dsub+0x6e4>)
 800136c:	42a2      	cmp	r2, r4
 800136e:	d100      	bne.n	8001372 <__aeabi_dsub+0x52e>
 8001370:	e0d5      	b.n	800151e <__aeabi_dsub+0x6da>
 8001372:	4448      	add	r0, r9
 8001374:	185b      	adds	r3, r3, r1
 8001376:	4548      	cmp	r0, r9
 8001378:	4189      	sbcs	r1, r1
 800137a:	4249      	negs	r1, r1
 800137c:	185b      	adds	r3, r3, r1
 800137e:	07dc      	lsls	r4, r3, #31
 8001380:	0840      	lsrs	r0, r0, #1
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	4698      	mov	r8, r3
 8001386:	0016      	movs	r6, r2
 8001388:	4304      	orrs	r4, r0
 800138a:	e6cc      	b.n	8001126 <__aeabi_dsub+0x2e2>
 800138c:	2a00      	cmp	r2, #0
 800138e:	d000      	beq.n	8001392 <__aeabi_dsub+0x54e>
 8001390:	e082      	b.n	8001498 <__aeabi_dsub+0x654>
 8001392:	000a      	movs	r2, r1
 8001394:	4302      	orrs	r2, r0
 8001396:	d140      	bne.n	800141a <__aeabi_dsub+0x5d6>
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	2500      	movs	r5, #0
 800139c:	031b      	lsls	r3, r3, #12
 800139e:	e713      	b.n	80011c8 <__aeabi_dsub+0x384>
 80013a0:	074b      	lsls	r3, r1, #29
 80013a2:	08c2      	lsrs	r2, r0, #3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	465d      	mov	r5, fp
 80013a8:	08cb      	lsrs	r3, r1, #3
 80013aa:	e6c5      	b.n	8001138 <__aeabi_dsub+0x2f4>
 80013ac:	464a      	mov	r2, r9
 80013ae:	1a84      	subs	r4, r0, r2
 80013b0:	42a0      	cmp	r0, r4
 80013b2:	4192      	sbcs	r2, r2
 80013b4:	1acb      	subs	r3, r1, r3
 80013b6:	4252      	negs	r2, r2
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	4698      	mov	r8, r3
 80013bc:	465d      	mov	r5, fp
 80013be:	e59e      	b.n	8000efe <__aeabi_dsub+0xba>
 80013c0:	464a      	mov	r2, r9
 80013c2:	0759      	lsls	r1, r3, #29
 80013c4:	08d2      	lsrs	r2, r2, #3
 80013c6:	430a      	orrs	r2, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f9      	b.n	80011c0 <__aeabi_dsub+0x37c>
 80013cc:	464a      	mov	r2, r9
 80013ce:	1a14      	subs	r4, r2, r0
 80013d0:	45a1      	cmp	r9, r4
 80013d2:	4192      	sbcs	r2, r2
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	4252      	negs	r2, r2
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	4698      	mov	r8, r3
 80013dc:	2601      	movs	r6, #1
 80013de:	e586      	b.n	8000eee <__aeabi_dsub+0xaa>
 80013e0:	464a      	mov	r2, r9
 80013e2:	0759      	lsls	r1, r3, #29
 80013e4:	08d2      	lsrs	r2, r2, #3
 80013e6:	430a      	orrs	r2, r1
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	e6a5      	b.n	8001138 <__aeabi_dsub+0x2f4>
 80013ec:	464c      	mov	r4, r9
 80013ee:	4323      	orrs	r3, r4
 80013f0:	001c      	movs	r4, r3
 80013f2:	1e63      	subs	r3, r4, #1
 80013f4:	419c      	sbcs	r4, r3
 80013f6:	e65b      	b.n	80010b0 <__aeabi_dsub+0x26c>
 80013f8:	4665      	mov	r5, ip
 80013fa:	001e      	movs	r6, r3
 80013fc:	3d20      	subs	r5, #32
 80013fe:	40ee      	lsrs	r6, r5
 8001400:	2c20      	cmp	r4, #32
 8001402:	d005      	beq.n	8001410 <__aeabi_dsub+0x5cc>
 8001404:	2540      	movs	r5, #64	; 0x40
 8001406:	1b2d      	subs	r5, r5, r4
 8001408:	40ab      	lsls	r3, r5
 800140a:	464c      	mov	r4, r9
 800140c:	431c      	orrs	r4, r3
 800140e:	46a2      	mov	sl, r4
 8001410:	4654      	mov	r4, sl
 8001412:	1e63      	subs	r3, r4, #1
 8001414:	419c      	sbcs	r4, r3
 8001416:	4334      	orrs	r4, r6
 8001418:	e77d      	b.n	8001316 <__aeabi_dsub+0x4d2>
 800141a:	074b      	lsls	r3, r1, #29
 800141c:	08c2      	lsrs	r2, r0, #3
 800141e:	431a      	orrs	r2, r3
 8001420:	465d      	mov	r5, fp
 8001422:	08cb      	lsrs	r3, r1, #3
 8001424:	e6cc      	b.n	80011c0 <__aeabi_dsub+0x37c>
 8001426:	000a      	movs	r2, r1
 8001428:	4302      	orrs	r2, r0
 800142a:	d100      	bne.n	800142e <__aeabi_dsub+0x5ea>
 800142c:	e736      	b.n	800129c <__aeabi_dsub+0x458>
 800142e:	074b      	lsls	r3, r1, #29
 8001430:	08c2      	lsrs	r2, r0, #3
 8001432:	431a      	orrs	r2, r3
 8001434:	465d      	mov	r5, fp
 8001436:	08cb      	lsrs	r3, r1, #3
 8001438:	e681      	b.n	800113e <__aeabi_dsub+0x2fa>
 800143a:	464a      	mov	r2, r9
 800143c:	1a84      	subs	r4, r0, r2
 800143e:	42a0      	cmp	r0, r4
 8001440:	4192      	sbcs	r2, r2
 8001442:	1acb      	subs	r3, r1, r3
 8001444:	4252      	negs	r2, r2
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	4698      	mov	r8, r3
 800144a:	465d      	mov	r5, fp
 800144c:	2601      	movs	r6, #1
 800144e:	e54e      	b.n	8000eee <__aeabi_dsub+0xaa>
 8001450:	074b      	lsls	r3, r1, #29
 8001452:	08c2      	lsrs	r2, r0, #3
 8001454:	431a      	orrs	r2, r3
 8001456:	08cb      	lsrs	r3, r1, #3
 8001458:	e6b2      	b.n	80011c0 <__aeabi_dsub+0x37c>
 800145a:	464a      	mov	r2, r9
 800145c:	1a14      	subs	r4, r2, r0
 800145e:	45a1      	cmp	r9, r4
 8001460:	4192      	sbcs	r2, r2
 8001462:	1a5f      	subs	r7, r3, r1
 8001464:	4252      	negs	r2, r2
 8001466:	1aba      	subs	r2, r7, r2
 8001468:	4690      	mov	r8, r2
 800146a:	0212      	lsls	r2, r2, #8
 800146c:	d56b      	bpl.n	8001546 <__aeabi_dsub+0x702>
 800146e:	464a      	mov	r2, r9
 8001470:	1a84      	subs	r4, r0, r2
 8001472:	42a0      	cmp	r0, r4
 8001474:	4192      	sbcs	r2, r2
 8001476:	1acb      	subs	r3, r1, r3
 8001478:	4252      	negs	r2, r2
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	4698      	mov	r8, r3
 800147e:	465d      	mov	r5, fp
 8001480:	e564      	b.n	8000f4c <__aeabi_dsub+0x108>
 8001482:	074b      	lsls	r3, r1, #29
 8001484:	08c2      	lsrs	r2, r0, #3
 8001486:	431a      	orrs	r2, r3
 8001488:	465d      	mov	r5, fp
 800148a:	08cb      	lsrs	r3, r1, #3
 800148c:	e698      	b.n	80011c0 <__aeabi_dsub+0x37c>
 800148e:	074b      	lsls	r3, r1, #29
 8001490:	08c2      	lsrs	r2, r0, #3
 8001492:	431a      	orrs	r2, r3
 8001494:	08cb      	lsrs	r3, r1, #3
 8001496:	e64f      	b.n	8001138 <__aeabi_dsub+0x2f4>
 8001498:	000a      	movs	r2, r1
 800149a:	4302      	orrs	r2, r0
 800149c:	d090      	beq.n	80013c0 <__aeabi_dsub+0x57c>
 800149e:	464a      	mov	r2, r9
 80014a0:	075c      	lsls	r4, r3, #29
 80014a2:	08d2      	lsrs	r2, r2, #3
 80014a4:	4314      	orrs	r4, r2
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	0312      	lsls	r2, r2, #12
 80014ac:	4213      	tst	r3, r2
 80014ae:	d008      	beq.n	80014c2 <__aeabi_dsub+0x67e>
 80014b0:	08ce      	lsrs	r6, r1, #3
 80014b2:	4216      	tst	r6, r2
 80014b4:	d105      	bne.n	80014c2 <__aeabi_dsub+0x67e>
 80014b6:	08c0      	lsrs	r0, r0, #3
 80014b8:	0749      	lsls	r1, r1, #29
 80014ba:	4308      	orrs	r0, r1
 80014bc:	0004      	movs	r4, r0
 80014be:	465d      	mov	r5, fp
 80014c0:	0033      	movs	r3, r6
 80014c2:	0f61      	lsrs	r1, r4, #29
 80014c4:	00e2      	lsls	r2, r4, #3
 80014c6:	0749      	lsls	r1, r1, #29
 80014c8:	08d2      	lsrs	r2, r2, #3
 80014ca:	430a      	orrs	r2, r1
 80014cc:	e678      	b.n	80011c0 <__aeabi_dsub+0x37c>
 80014ce:	074b      	lsls	r3, r1, #29
 80014d0:	08c2      	lsrs	r2, r0, #3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	08cb      	lsrs	r3, r1, #3
 80014d6:	e632      	b.n	800113e <__aeabi_dsub+0x2fa>
 80014d8:	4448      	add	r0, r9
 80014da:	185b      	adds	r3, r3, r1
 80014dc:	4548      	cmp	r0, r9
 80014de:	4192      	sbcs	r2, r2
 80014e0:	4698      	mov	r8, r3
 80014e2:	4252      	negs	r2, r2
 80014e4:	4490      	add	r8, r2
 80014e6:	4643      	mov	r3, r8
 80014e8:	0004      	movs	r4, r0
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	d400      	bmi.n	80014f0 <__aeabi_dsub+0x6ac>
 80014ee:	e61a      	b.n	8001126 <__aeabi_dsub+0x2e2>
 80014f0:	4642      	mov	r2, r8
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <__aeabi_dsub+0x6e8>)
 80014f4:	2601      	movs	r6, #1
 80014f6:	401a      	ands	r2, r3
 80014f8:	4690      	mov	r8, r2
 80014fa:	e614      	b.n	8001126 <__aeabi_dsub+0x2e2>
 80014fc:	4666      	mov	r6, ip
 80014fe:	001f      	movs	r7, r3
 8001500:	3e20      	subs	r6, #32
 8001502:	40f7      	lsrs	r7, r6
 8001504:	2c20      	cmp	r4, #32
 8001506:	d005      	beq.n	8001514 <__aeabi_dsub+0x6d0>
 8001508:	2640      	movs	r6, #64	; 0x40
 800150a:	1b36      	subs	r6, r6, r4
 800150c:	40b3      	lsls	r3, r6
 800150e:	464c      	mov	r4, r9
 8001510:	431c      	orrs	r4, r3
 8001512:	46a2      	mov	sl, r4
 8001514:	4654      	mov	r4, sl
 8001516:	1e63      	subs	r3, r4, #1
 8001518:	419c      	sbcs	r4, r3
 800151a:	433c      	orrs	r4, r7
 800151c:	e5c8      	b.n	80010b0 <__aeabi_dsub+0x26c>
 800151e:	0011      	movs	r1, r2
 8001520:	2300      	movs	r3, #0
 8001522:	2200      	movs	r2, #0
 8001524:	e532      	b.n	8000f8c <__aeabi_dsub+0x148>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff
 800152c:	ff7fffff 	.word	0xff7fffff
 8001530:	000007fe 	.word	0x000007fe
 8001534:	464a      	mov	r2, r9
 8001536:	1814      	adds	r4, r2, r0
 8001538:	4284      	cmp	r4, r0
 800153a:	4192      	sbcs	r2, r2
 800153c:	185b      	adds	r3, r3, r1
 800153e:	4698      	mov	r8, r3
 8001540:	4252      	negs	r2, r2
 8001542:	4490      	add	r8, r2
 8001544:	e5e9      	b.n	800111a <__aeabi_dsub+0x2d6>
 8001546:	4642      	mov	r2, r8
 8001548:	4322      	orrs	r2, r4
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x70a>
 800154c:	e6a6      	b.n	800129c <__aeabi_dsub+0x458>
 800154e:	e5ea      	b.n	8001126 <__aeabi_dsub+0x2e2>
 8001550:	074b      	lsls	r3, r1, #29
 8001552:	08c2      	lsrs	r2, r0, #3
 8001554:	431a      	orrs	r2, r3
 8001556:	08cb      	lsrs	r3, r1, #3
 8001558:	e632      	b.n	80011c0 <__aeabi_dsub+0x37c>
 800155a:	2200      	movs	r2, #0
 800155c:	4901      	ldr	r1, [pc, #4]	; (8001564 <__aeabi_dsub+0x720>)
 800155e:	0013      	movs	r3, r2
 8001560:	e514      	b.n	8000f8c <__aeabi_dsub+0x148>
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	000007ff 	.word	0x000007ff

08001568 <__aeabi_d2iz>:
 8001568:	000a      	movs	r2, r1
 800156a:	b530      	push	{r4, r5, lr}
 800156c:	4c13      	ldr	r4, [pc, #76]	; (80015bc <__aeabi_d2iz+0x54>)
 800156e:	0053      	lsls	r3, r2, #1
 8001570:	0309      	lsls	r1, r1, #12
 8001572:	0005      	movs	r5, r0
 8001574:	0b09      	lsrs	r1, r1, #12
 8001576:	2000      	movs	r0, #0
 8001578:	0d5b      	lsrs	r3, r3, #21
 800157a:	0fd2      	lsrs	r2, r2, #31
 800157c:	42a3      	cmp	r3, r4
 800157e:	dd04      	ble.n	800158a <__aeabi_d2iz+0x22>
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <__aeabi_d2iz+0x58>)
 8001582:	4283      	cmp	r3, r0
 8001584:	dd02      	ble.n	800158c <__aeabi_d2iz+0x24>
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <__aeabi_d2iz+0x5c>)
 8001588:	18d0      	adds	r0, r2, r3
 800158a:	bd30      	pop	{r4, r5, pc}
 800158c:	2080      	movs	r0, #128	; 0x80
 800158e:	0340      	lsls	r0, r0, #13
 8001590:	4301      	orrs	r1, r0
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <__aeabi_d2iz+0x60>)
 8001594:	1ac0      	subs	r0, r0, r3
 8001596:	281f      	cmp	r0, #31
 8001598:	dd08      	ble.n	80015ac <__aeabi_d2iz+0x44>
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <__aeabi_d2iz+0x64>)
 800159c:	1ac3      	subs	r3, r0, r3
 800159e:	40d9      	lsrs	r1, r3
 80015a0:	000b      	movs	r3, r1
 80015a2:	4258      	negs	r0, r3
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d1f0      	bne.n	800158a <__aeabi_d2iz+0x22>
 80015a8:	0018      	movs	r0, r3
 80015aa:	e7ee      	b.n	800158a <__aeabi_d2iz+0x22>
 80015ac:	4c08      	ldr	r4, [pc, #32]	; (80015d0 <__aeabi_d2iz+0x68>)
 80015ae:	40c5      	lsrs	r5, r0
 80015b0:	46a4      	mov	ip, r4
 80015b2:	4463      	add	r3, ip
 80015b4:	4099      	lsls	r1, r3
 80015b6:	000b      	movs	r3, r1
 80015b8:	432b      	orrs	r3, r5
 80015ba:	e7f2      	b.n	80015a2 <__aeabi_d2iz+0x3a>
 80015bc:	000003fe 	.word	0x000003fe
 80015c0:	0000041d 	.word	0x0000041d
 80015c4:	7fffffff 	.word	0x7fffffff
 80015c8:	00000433 	.word	0x00000433
 80015cc:	00000413 	.word	0x00000413
 80015d0:	fffffbed 	.word	0xfffffbed

080015d4 <__aeabi_f2d>:
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	0043      	lsls	r3, r0, #1
 80015d8:	0246      	lsls	r6, r0, #9
 80015da:	0fc4      	lsrs	r4, r0, #31
 80015dc:	20fe      	movs	r0, #254	; 0xfe
 80015de:	0e1b      	lsrs	r3, r3, #24
 80015e0:	1c59      	adds	r1, r3, #1
 80015e2:	0a75      	lsrs	r5, r6, #9
 80015e4:	4208      	tst	r0, r1
 80015e6:	d00c      	beq.n	8001602 <__aeabi_f2d+0x2e>
 80015e8:	22e0      	movs	r2, #224	; 0xe0
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4694      	mov	ip, r2
 80015ee:	076d      	lsls	r5, r5, #29
 80015f0:	0b36      	lsrs	r6, r6, #12
 80015f2:	4463      	add	r3, ip
 80015f4:	051b      	lsls	r3, r3, #20
 80015f6:	4333      	orrs	r3, r6
 80015f8:	07e4      	lsls	r4, r4, #31
 80015fa:	4323      	orrs	r3, r4
 80015fc:	0028      	movs	r0, r5
 80015fe:	0019      	movs	r1, r3
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	2b00      	cmp	r3, #0
 8001604:	d114      	bne.n	8001630 <__aeabi_f2d+0x5c>
 8001606:	2d00      	cmp	r5, #0
 8001608:	d01b      	beq.n	8001642 <__aeabi_f2d+0x6e>
 800160a:	0028      	movs	r0, r5
 800160c:	f000 f82a 	bl	8001664 <__clzsi2>
 8001610:	280a      	cmp	r0, #10
 8001612:	dc1c      	bgt.n	800164e <__aeabi_f2d+0x7a>
 8001614:	230b      	movs	r3, #11
 8001616:	002a      	movs	r2, r5
 8001618:	1a1b      	subs	r3, r3, r0
 800161a:	40da      	lsrs	r2, r3
 800161c:	0003      	movs	r3, r0
 800161e:	3315      	adds	r3, #21
 8001620:	409d      	lsls	r5, r3
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <__aeabi_f2d+0x88>)
 8001624:	0312      	lsls	r2, r2, #12
 8001626:	1a1b      	subs	r3, r3, r0
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	0b16      	lsrs	r6, r2, #12
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	e7e1      	b.n	80015f4 <__aeabi_f2d+0x20>
 8001630:	2d00      	cmp	r5, #0
 8001632:	d009      	beq.n	8001648 <__aeabi_f2d+0x74>
 8001634:	0b32      	lsrs	r2, r6, #12
 8001636:	2680      	movs	r6, #128	; 0x80
 8001638:	0336      	lsls	r6, r6, #12
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <__aeabi_f2d+0x8c>)
 800163c:	076d      	lsls	r5, r5, #29
 800163e:	4316      	orrs	r6, r2
 8001640:	e7d8      	b.n	80015f4 <__aeabi_f2d+0x20>
 8001642:	2300      	movs	r3, #0
 8001644:	2600      	movs	r6, #0
 8001646:	e7d5      	b.n	80015f4 <__aeabi_f2d+0x20>
 8001648:	2600      	movs	r6, #0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <__aeabi_f2d+0x8c>)
 800164c:	e7d2      	b.n	80015f4 <__aeabi_f2d+0x20>
 800164e:	0003      	movs	r3, r0
 8001650:	002a      	movs	r2, r5
 8001652:	3b0b      	subs	r3, #11
 8001654:	409a      	lsls	r2, r3
 8001656:	2500      	movs	r5, #0
 8001658:	e7e3      	b.n	8001622 <__aeabi_f2d+0x4e>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	00000389 	.word	0x00000389
 8001660:	000007ff 	.word	0x000007ff

08001664 <__clzsi2>:
 8001664:	211c      	movs	r1, #28
 8001666:	2301      	movs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	4298      	cmp	r0, r3
 800166c:	d301      	bcc.n	8001672 <__clzsi2+0xe>
 800166e:	0c00      	lsrs	r0, r0, #16
 8001670:	3910      	subs	r1, #16
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	4298      	cmp	r0, r3
 8001676:	d301      	bcc.n	800167c <__clzsi2+0x18>
 8001678:	0a00      	lsrs	r0, r0, #8
 800167a:	3908      	subs	r1, #8
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	4298      	cmp	r0, r3
 8001680:	d301      	bcc.n	8001686 <__clzsi2+0x22>
 8001682:	0900      	lsrs	r0, r0, #4
 8001684:	3904      	subs	r1, #4
 8001686:	a202      	add	r2, pc, #8	; (adr r2, 8001690 <__clzsi2+0x2c>)
 8001688:	5c10      	ldrb	r0, [r2, r0]
 800168a:	1840      	adds	r0, r0, r1
 800168c:	4770      	bx	lr
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	02020304 	.word	0x02020304
 8001694:	01010101 	.word	0x01010101
	...

080016a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a6:	2314      	movs	r3, #20
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	0018      	movs	r0, r3
 80016ac:	230c      	movs	r3, #12
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f003 f87f 	bl	80047b4 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80016b6:	003b      	movs	r3, r7
 80016b8:	0018      	movs	r0, r3
 80016ba:	2314      	movs	r3, #20
 80016bc:	001a      	movs	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	f003 f878 	bl	80047b4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <MX_ADC_Init+0xf8>)
 80016c6:	4a35      	ldr	r2, [pc, #212]	; (800179c <MX_ADC_Init+0xfc>)
 80016c8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <MX_ADC_Init+0xf8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <MX_ADC_Init+0xf8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <MX_ADC_Init+0xf8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <MX_ADC_Init+0xf8>)
 80016de:	2201      	movs	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_ADC_Init+0xf8>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MX_ADC_Init+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <MX_ADC_Init+0xf8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_ADC_Init+0xf8>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <MX_ADC_Init+0xf8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_ADC_Init+0xf8>)
 8001702:	22c2      	movs	r2, #194	; 0xc2
 8001704:	32ff      	adds	r2, #255	; 0xff
 8001706:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_ADC_Init+0xf8>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_ADC_Init+0xf8>)
 8001710:	2224      	movs	r2, #36	; 0x24
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_ADC_Init+0xf8>)
 8001718:	2201      	movs	r2, #1
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_ADC_Init+0xf8>)
 800171e:	0018      	movs	r0, r3
 8001720:	f000 fd78 	bl	8002214 <HAL_ADC_Init>
 8001724:	1e03      	subs	r3, r0, #0
 8001726:	d001      	beq.n	800172c <MX_ADC_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 fa6a 	bl	8001c00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800172c:	2114      	movs	r1, #20
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2204      	movs	r2, #4
 8001732:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	0152      	lsls	r2, r2, #5
 800173a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2207      	movs	r2, #7
 8001740:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001742:	187a      	adds	r2, r7, r1
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_ADC_Init+0xf8>)
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f001 f87b 	bl	8002844 <HAL_ADC_ConfigChannel>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001752:	f000 fa55 	bl	8001c00 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001756:	003b      	movs	r3, r7
 8001758:	22c0      	movs	r2, #192	; 0xc0
 800175a:	0412      	lsls	r2, r2, #16
 800175c:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.Channel = ADC_CHANNEL_4;
 800175e:	003b      	movs	r3, r7
 8001760:	2204      	movs	r2, #4
 8001762:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.ITMode = ENABLE;
 8001764:	003b      	movs	r3, r7
 8001766:	2201      	movs	r2, #1
 8001768:	721a      	strb	r2, [r3, #8]
  AnalogWDGConfig.HighThreshold = 2000;
 800176a:	003b      	movs	r3, r7
 800176c:	22fa      	movs	r2, #250	; 0xfa
 800176e:	00d2      	lsls	r2, r2, #3
 8001770:	60da      	str	r2, [r3, #12]
  AnalogWDGConfig.LowThreshold = 500;
 8001772:	003b      	movs	r3, r7
 8001774:	22fa      	movs	r2, #250	; 0xfa
 8001776:	0052      	lsls	r2, r2, #1
 8001778:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 800177a:	003a      	movs	r2, r7
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_ADC_Init+0xf8>)
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f001 f955 	bl	8002a30 <HAL_ADC_AnalogWDGConfig>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d001      	beq.n	800178e <MX_ADC_Init+0xee>
  {
    Error_Handler();
 800178a:	f000 fa39 	bl	8001c00 <Error_Handler>
  }

}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b008      	add	sp, #32
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	2000002c 	.word	0x2000002c
 800179c:	40012400 	.word	0x40012400

080017a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	2414      	movs	r4, #20
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	0018      	movs	r0, r3
 80017ae:	2314      	movs	r3, #20
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f002 fffe 	bl	80047b4 <memset>
  if(adcHandle->Instance==ADC1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_ADC_MspInit+0x94>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d133      	bne.n	800182a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0089      	lsls	r1, r1, #2
 80017cc:	430a      	orrs	r2, r1
 80017ce:	619a      	str	r2, [r3, #24]
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0289      	lsls	r1, r1, #10
 80017e8:	430a      	orrs	r2, r1
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	2210      	movs	r2, #16
 80017fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	193b      	adds	r3, r7, r4
 8001802:	2203      	movs	r2, #3
 8001804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800180c:	193a      	adds	r2, r7, r4
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f001 faf3 	bl	8002e00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	200c      	movs	r0, #12
 8001820:	f001 fabc 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001824:	200c      	movs	r0, #12
 8001826:	f001 face 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b00b      	add	sp, #44	; 0x2c
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40012400 	.word	0x40012400
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_LevelOutOfWindowCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001844:	2301      	movs	r3, #1
 8001846:	425a      	negs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f000 fe21 	bl	8002494 <HAL_ADC_PollForConversion>
	uint16_t tmp_adcVal = HAL_ADC_GetValue(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f000 ff21 	bl	800269c <HAL_ADC_GetValue>
 800185a:	0002      	movs	r2, r0
 800185c:	210e      	movs	r1, #14
 800185e:	187b      	adds	r3, r7, r1
 8001860:	801a      	strh	r2, [r3, #0]
	if(tmp_adcVal <= Control.ShiftForceADCLowTsh)
 8001862:	187b      	adds	r3, r7, r1
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_ADC_LevelOutOfWindowCallback+0x84>)
 8001868:	2104      	movs	r1, #4
 800186a:	5e52      	ldrsh	r2, [r2, r1]
 800186c:	4293      	cmp	r3, r2
 800186e:	dc23      	bgt.n	80018b8 <HAL_ADC_LevelOutOfWindowCallback+0x7c>
	{
			HAL_GPIO_WritePin(IGN_CUTOFF_GPIO_Port, IGN_CUTOFF_Pin, SET);
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	0119      	lsls	r1, r3, #4
 8001874:	2390      	movs	r3, #144	; 0x90
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	2201      	movs	r2, #1
 800187a:	0018      	movs	r0, r3
 800187c:	f001 fc30 	bl	80030e0 <HAL_GPIO_WritePin>
			ADC1->IER &= ~(ADC_IER_AWD1IE);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_ADC_LevelOutOfWindowCallback+0x88>)
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_ADC_LevelOutOfWindowCallback+0x88>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	438a      	bics	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
			TIM14->DIER |= (TIM_DIER_CC1IE);	//enable interrupt on TIM14 OC
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 8001892:	2102      	movs	r1, #2
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]
			TIM14->CNT = MAX_TIME_IGNITION_OFF-Control.CutoffTime;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_ADC_LevelOutOfWindowCallback+0x84>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	001a      	movs	r2, r3
 800189e:	2396      	movs	r3, #150	; 0x96
 80018a0:	1a9a      	subs	r2, r3, r2
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
			TIM14->CR1 |= TIM_CR1_CEN;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
			flag_adc_low_treshold = 1;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_ADC_LevelOutOfWindowCallback+0x90>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
	}
	else if(tmp_adcVal < Control.ShiftForceADCHighTsh)
	{
		//TODO: gear indicator etc.
	}
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000006c 	.word	0x2000006c
 80018c4:	40012400 	.word	0x40012400
 80018c8:	40002000 	.word	0x40002000
 80018cc:	20000029 	.word	0x20000029

080018d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	240c      	movs	r4, #12
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	0018      	movs	r0, r3
 80018dc:	2314      	movs	r3, #20
 80018de:	001a      	movs	r2, r3
 80018e0:	2100      	movs	r1, #0
 80018e2:	f002 ff67 	bl	80047b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MX_GPIO_Init+0x90>)
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_GPIO_Init+0x90>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	03c9      	lsls	r1, r1, #15
 80018f0:	430a      	orrs	r2, r1
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_GPIO_Init+0x90>)
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	03db      	lsls	r3, r3, #15
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_GPIO_Init+0x90>)
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_GPIO_Init+0x90>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0289      	lsls	r1, r1, #10
 800190c:	430a      	orrs	r2, r1
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_GPIO_Init+0x90>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_CUTOFF_GPIO_Port, IGN_CUTOFF_Pin, GPIO_PIN_RESET);
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	0119      	lsls	r1, r3, #4
 8001922:	2390      	movs	r3, #144	; 0x90
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	2200      	movs	r2, #0
 8001928:	0018      	movs	r0, r3
 800192a:	f001 fbd9 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_CUTOFF_Pin;
 800192e:	193b      	adds	r3, r7, r4
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	193b      	adds	r3, r7, r4
 8001938:	2201      	movs	r2, #1
 800193a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	193b      	adds	r3, r7, r4
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	193b      	adds	r3, r7, r4
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IGN_CUTOFF_GPIO_Port, &GPIO_InitStruct);
 8001948:	193a      	adds	r2, r7, r4
 800194a:	2390      	movs	r3, #144	; 0x90
 800194c:	05db      	lsls	r3, r3, #23
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fa55 	bl	8002e00 <HAL_GPIO_Init>

}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b009      	add	sp, #36	; 0x24
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Settings.CutoffTime = DEFAULT_TIME_IGNITION_OFF;
 800196a:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <main+0x1c4>)
 800196c:	2241      	movs	r2, #65	; 0x41
 800196e:	801a      	strh	r2, [r3, #0]
	Settings.deadtime = DEFAULT_TIME_NO_SENSING;
 8001970:	4b6d      	ldr	r3, [pc, #436]	; (8001b28 <main+0x1c4>)
 8001972:	22fa      	movs	r2, #250	; 0xfa
 8001974:	0052      	lsls	r2, r2, #1
 8001976:	805a      	strh	r2, [r3, #2]
	Settings.ShiftForce = DEFAULT_SHIFT_FORCE;
 8001978:	4b6b      	ldr	r3, [pc, #428]	; (8001b28 <main+0x1c4>)
 800197a:	221d      	movs	r2, #29
 800197c:	809a      	strh	r2, [r3, #4]

	Control.CutoffTime = Settings.CutoffTime;
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <main+0x1c4>)
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <main+0x1c8>)
 8001984:	801a      	strh	r2, [r3, #0]
	Control.deadtime = Settings.deadtime;
 8001986:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <main+0x1c4>)
 8001988:	885a      	ldrh	r2, [r3, #2]
 800198a:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <main+0x1c8>)
 800198c:	805a      	strh	r2, [r3, #2]

	Control.ShiftForceADCHighTsh = (((float)INST_AMP_GAIN*(0.4189*(float)Settings.ShiftForce) - 2.9365) + DEFAULT_ADC_IDLE);
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <main+0x1c4>)
 8001990:	889b      	ldrh	r3, [r3, #4]
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe fc44 	bl	8000220 <__aeabi_ui2f>
 8001998:	1c03      	adds	r3, r0, #0
 800199a:	1c18      	adds	r0, r3, #0
 800199c:	f7ff fe1a 	bl	80015d4 <__aeabi_f2d>
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <main+0x1cc>)
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <main+0x1d0>)
 80019a4:	f7fe ffe2 	bl	800096c <__aeabi_dmul>
 80019a8:	0002      	movs	r2, r0
 80019aa:	000b      	movs	r3, r1
 80019ac:	0010      	movs	r0, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <main+0x1d4>)
 80019b4:	f7fe ffda 	bl	800096c <__aeabi_dmul>
 80019b8:	0002      	movs	r2, r0
 80019ba:	000b      	movs	r3, r1
 80019bc:	0010      	movs	r0, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <main+0x1d8>)
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <main+0x1dc>)
 80019c4:	f7ff fa3e 	bl	8000e44 <__aeabi_dsub>
 80019c8:	0002      	movs	r2, r0
 80019ca:	000b      	movs	r3, r1
 80019cc:	0010      	movs	r0, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <main+0x1e0>)
 80019d4:	f7fe fc60 	bl	8000298 <__aeabi_dadd>
 80019d8:	0002      	movs	r2, r0
 80019da:	000b      	movs	r3, r1
 80019dc:	0010      	movs	r0, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	f7ff fdc2 	bl	8001568 <__aeabi_d2iz>
 80019e4:	0003      	movs	r3, r0
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <main+0x1c8>)
 80019ea:	80da      	strh	r2, [r3, #6]
	Control.ShiftForceADCLowTsh  = (((float)INST_AMP_GAIN*(-0.4189*(float)Settings.ShiftForce) - 2.9365) + DEFAULT_ADC_IDLE);
 80019ec:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <main+0x1c4>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7fe fc15 	bl	8000220 <__aeabi_ui2f>
 80019f6:	1c03      	adds	r3, r0, #0
 80019f8:	1c18      	adds	r0, r3, #0
 80019fa:	f7ff fdeb 	bl	80015d4 <__aeabi_f2d>
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <main+0x1cc>)
 8001a00:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <main+0x1e4>)
 8001a02:	f7fe ffb3 	bl	800096c <__aeabi_dmul>
 8001a06:	0002      	movs	r2, r0
 8001a08:	000b      	movs	r3, r1
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <main+0x1d4>)
 8001a12:	f7fe ffab 	bl	800096c <__aeabi_dmul>
 8001a16:	0002      	movs	r2, r0
 8001a18:	000b      	movs	r3, r1
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <main+0x1d8>)
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <main+0x1dc>)
 8001a22:	f7ff fa0f 	bl	8000e44 <__aeabi_dsub>
 8001a26:	0002      	movs	r2, r0
 8001a28:	000b      	movs	r3, r1
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <main+0x1e0>)
 8001a32:	f7fe fc31 	bl	8000298 <__aeabi_dadd>
 8001a36:	0002      	movs	r2, r0
 8001a38:	000b      	movs	r3, r1
 8001a3a:	0010      	movs	r0, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	f7ff fd93 	bl	8001568 <__aeabi_d2iz>
 8001a42:	0003      	movs	r3, r0
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <main+0x1c8>)
 8001a48:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4a:	f000 fb7f 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4e:	f000 f887 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a52:	f7ff ff3d 	bl	80018d0 <MX_GPIO_Init>
  MX_ADC_Init();
 8001a56:	f7ff fe23 	bl	80016a0 <MX_ADC_Init>
  MX_TIM1_Init();
 8001a5a:	f000 f93f 	bl	8001cdc <MX_TIM1_Init>
  MX_TIM14_Init();
 8001a5e:	f000 f995 	bl	8001d8c <MX_TIM14_Init>
  MX_TIM16_Init();
 8001a62:	f000 f9e1 	bl	8001e28 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, RESET);
	HAL_GPIO_WritePin(IGN_CUTOFF_GPIO_Port, IGN_CUTOFF_Pin, RESET);
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	0119      	lsls	r1, r3, #4
 8001a6a:	2390      	movs	r3, #144	; 0x90
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	2200      	movs	r2, #0
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 fb35 	bl	80030e0 <HAL_GPIO_WritePin>

	//HAL_TIM_Base_Start(&htim1);
	HAL_TIM_Base_Start(&htim14);
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <main+0x1e8>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f001 ffed 	bl	8003a58 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim16);
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <main+0x1ec>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 ffe9 	bl	8003a58 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc);
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <main+0x1f0>)
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fd95 	bl	80025b8 <HAL_ADC_Start_IT>


	ADC1->CR |= ADC_CR_ADSTP;
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <main+0x1f4>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <main+0x1f4>)
 8001a94:	2110      	movs	r1, #16
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
	ADC1->IER &= ~(ADC_IER_AWD1IE);
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <main+0x1f4>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <main+0x1f4>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	605a      	str	r2, [r3, #4]
	/* Shift the offset in function of the selected ADC resolution: Thresholds*/
	/* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
	uint32_t tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(&hadc, Control.ShiftForceADCHighTsh);
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <main+0x1c8>)
 8001aa8:	2206      	movs	r2, #6
 8001aaa:	5e9b      	ldrsh	r3, [r3, r2]
 8001aac:	0019      	movs	r1, r3
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <main+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4099      	lsls	r1, r3
 8001abe:	000b      	movs	r3, r1
 8001ac0:	607b      	str	r3, [r7, #4]
	uint32_t tmpAWDLowThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(&hadc, Control.ShiftForceADCLowTsh);
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <main+0x1c8>)
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ac8:	0019      	movs	r1, r3
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <main+0x1f0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4099      	lsls	r1, r3
 8001ada:	000b      	movs	r3, r1
 8001adc:	603b      	str	r3, [r7, #0]
	/* Set the high and low thresholds */
	hadc.Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <main+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <main+0x1f0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	491c      	ldr	r1, [pc, #112]	; (8001b5c <main+0x1f8>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	621a      	str	r2, [r3, #32]
	hadc.Instance->TR |= (ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) | tmpAWDLowThresholdShifted);
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <main+0x1f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a19      	ldr	r1, [r3, #32]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <main+0x1f0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	621a      	str	r2, [r3, #32]
	/* Clear the ADC Analog watchdog flag (in case of left enabled by         */
	/* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
	/* or HAL_ADC_PollForEvent().                                             */
	__HAL_ADC_CLEAR_FLAG(&hadc, ADC_IT_AWD);
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <main+0x1f0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	601a      	str	r2, [r3, #0]

	ADC1->IER |= (ADC_IER_AWD1IE);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <main+0x1f4>)
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <main+0x1f4>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	430a      	orrs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADSTART;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <main+0x1f4>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <main+0x1f4>)
 8001b1e:	2104      	movs	r1, #4
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001b24:	e7fe      	b.n	8001b24 <main+0x1c0>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	20000074 	.word	0x20000074
 8001b2c:	2000006c 	.word	0x2000006c
 8001b30:	f212d773 	.word	0xf212d773
 8001b34:	3fdacf41 	.word	0x3fdacf41
 8001b38:	4058c000 	.word	0x4058c000
 8001b3c:	b645a1cb 	.word	0xb645a1cb
 8001b40:	40077df3 	.word	0x40077df3
 8001b44:	40945000 	.word	0x40945000
 8001b48:	bfdacf41 	.word	0xbfdacf41
 8001b4c:	200000c4 	.word	0x200000c4
 8001b50:	2000010c 	.word	0x2000010c
 8001b54:	2000002c 	.word	0x2000002c
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	f000f000 	.word	0xf000f000

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b091      	sub	sp, #68	; 0x44
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	2410      	movs	r4, #16
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	2330      	movs	r3, #48	; 0x30
 8001b6e:	001a      	movs	r2, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f002 fe1f 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b76:	003b      	movs	r3, r7
 8001b78:	0018      	movs	r0, r3
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f002 fe18 	bl	80047b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001b84:	0021      	movs	r1, r4
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2212      	movs	r2, #18
 8001b8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2201      	movs	r2, #1
 8001b90:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2201      	movs	r2, #1
 8001b96:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	22a0      	movs	r2, #160	; 0xa0
 8001bb4:	0392      	lsls	r2, r2, #14
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f001 faab 	bl	800311c <HAL_RCC_OscConfig>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bca:	f000 f819 	bl	8001c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bda:	003b      	movs	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be0:	003b      	movs	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be6:	003b      	movs	r3, r7
 8001be8:	2101      	movs	r1, #1
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 fdb0 	bl	8003750 <HAL_RCC_ClockConfig>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bf4:	f000 f804 	bl	8001c00 <Error_Handler>
  }
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b011      	add	sp, #68	; 0x44
 8001bfe:	bd90      	pop	{r4, r7, pc}

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//HAL_GPIO_TogglePin(ERROR_GPIO_Port, ERROR_Pin);
	//HAL_Delay(500);
  /* USER CODE END Error_Handler_Debug */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_MspInit+0x44>)
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_MspInit+0x44>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	619a      	str	r2, [r3, #24]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_MspInit+0x44>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_MspInit+0x44>)
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_MspInit+0x44>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0549      	lsls	r1, r1, #21
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_MspInit+0x44>)
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 faae 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <ADC1_IRQHandler+0x14>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 fd10 	bl	80026b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	2000002c 	.word	0x2000002c

08001ca0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <TIM14_IRQHandler+0x14>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f001 ff6c 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	200000c4 	.word	0x200000c4

08001cb8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <TIM16_IRQHandler+0x14>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 ff60 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	2000010c 	.word	0x2000010c

08001cd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	2310      	movs	r3, #16
 8001cea:	001a      	movs	r2, r3
 8001cec:	2100      	movs	r1, #0
 8001cee:	f002 fd61 	bl	80047b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	003b      	movs	r3, r7
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	f002 fd5a 	bl	80047b4 <memset>

  htim1.Instance = TIM1;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d02:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <MX_TIM1_Init+0xa8>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d08:	222f      	movs	r2, #47	; 0x2f
 8001d0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <MX_TIM1_Init+0xac>)
 8001d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f001 fe43 	bl	80039b8 <HAL_TIM_Base_Init>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001d36:	f7ff ff63 	bl	8001c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0152      	lsls	r2, r2, #5
 8001d42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d44:	187a      	adds	r2, r7, r1
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d48:	0011      	movs	r1, r2
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f002 f87e 	bl	8003e4c <HAL_TIM_ConfigClockSource>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f7ff ff54 	bl	8001c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	003b      	movs	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	003b      	movs	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d64:	003a      	movs	r2, r7
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_TIM1_Init+0xa4>)
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f002 fc3e 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001d74:	f7ff ff44 	bl	8001c00 <Error_Handler>
  }

}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b006      	add	sp, #24
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000007c 	.word	0x2000007c
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	0000ffff 	.word	0x0000ffff

08001d8c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	0018      	movs	r0, r3
 8001d96:	231c      	movs	r3, #28
 8001d98:	001a      	movs	r2, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f002 fd0a 	bl	80047b4 <memset>

  htim14.Instance = TIM14;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001da2:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <MX_TIM14_Init+0x90>)
 8001da4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000-1;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001da8:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <MX_TIM14_Init+0x94>)
 8001daa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <MX_TIM14_Init+0x98>)
 8001db6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 fdf6 	bl	80039b8 <HAL_TIM_Base_Init>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001dd0:	f7ff ff16 	bl	8001c00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 fe7c 	bl	8003ad4 <HAL_TIM_OC_Init>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001de0:	f7ff ff0e 	bl	8001c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = MAX_TIME_IGNITION_OFF;
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2296      	movs	r2, #150	; 0x96
 8001dee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	1d39      	adds	r1, r7, #4
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_TIM14_Init+0x8c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f001 ffd4 	bl	8003db0 <HAL_TIM_OC_ConfigChannel>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e0c:	f7ff fef8 	bl	8001c00 <Error_Handler>
  }

}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b008      	add	sp, #32
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000c4 	.word	0x200000c4
 8001e1c:	40002000 	.word	0x40002000
 8001e20:	0000bb7f 	.word	0x0000bb7f
 8001e24:	0000ffff 	.word	0x0000ffff

08001e28 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b090      	sub	sp, #64	; 0x40
 8001e2c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	2324      	movs	r3, #36	; 0x24
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	231c      	movs	r3, #28
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f002 fcbb 	bl	80047b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	0018      	movs	r0, r3
 8001e42:	2320      	movs	r3, #32
 8001e44:	001a      	movs	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f002 fcb4 	bl	80047b4 <memset>

  htim16.Instance = TIM16;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e4e:	4a35      	ldr	r2, [pc, #212]	; (8001f24 <MX_TIM16_Init+0xfc>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e54:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <MX_TIM16_Init+0x100>)
 8001e56:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e60:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <MX_TIM16_Init+0x104>)
 8001e62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fd9d 	bl	80039b8 <HAL_TIM_Base_Init>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001e82:	f7ff febd 	bl	8001c00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 fe23 	bl	8003ad4 <HAL_TIM_OC_Init>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001e92:	f7ff feb5 	bl	8001c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e96:	2124      	movs	r1, #36	; 0x24
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = MAX_TIME_NO_SENSING;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	22fa      	movs	r2, #250	; 0xfa
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec4:	1879      	adds	r1, r7, r1
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f001 ff70 	bl	8003db0 <HAL_TIM_OC_ConfigChannel>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001ed4:	f7ff fe94 	bl	8001c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	0192      	lsls	r2, r2, #6
 8001efc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f04:	1d3a      	adds	r2, r7, #4
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_TIM16_Init+0xf8>)
 8001f08:	0011      	movs	r1, r2
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 fbc0 	bl	8004690 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001f14:	f7ff fe74 	bl	8001c00 <Error_Handler>
  }

}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b010      	add	sp, #64	; 0x40
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000010c 	.word	0x2000010c
 8001f24:	40014400 	.word	0x40014400
 8001f28:	0000bb7f 	.word	0x0000bb7f
 8001f2c:	0000ffff 	.word	0x0000ffff

08001f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0109      	lsls	r1, r1, #4
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001f5e:	e036      	b.n	8001fce <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM14)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d116      	bne.n	8001f98 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0049      	lsls	r1, r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2013      	movs	r0, #19
 8001f8c:	f000 ff06 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001f90:	2013      	movs	r0, #19
 8001f92:	f000 ff18 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 8001f96:	e01a      	b.n	8001fce <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM16)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d115      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0289      	lsls	r1, r1, #10
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_TIM_Base_MspInit+0xac>)
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2015      	movs	r0, #21
 8001fc4:	f000 feea 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001fc8:	2015      	movs	r0, #21
 8001fca:	f000 fefc 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40002000 	.word	0x40002000
 8001fe4:	40014400 	.word	0x40014400

08001fe8 <HAL_TIM_OC_DelayElapsedCallback>:
//		}
//	}
//}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a39      	ldr	r2, [pc, #228]	; (80020dc <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d121      	bne.n	800203e <HAL_TIM_OC_DelayElapsedCallback+0x56>
	{
			HAL_GPIO_WritePin(IGN_CUTOFF_GPIO_Port, IGN_CUTOFF_Pin, RESET);
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	0119      	lsls	r1, r3, #4
 8001ffe:	2390      	movs	r3, #144	; 0x90
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	2200      	movs	r2, #0
 8002004:	0018      	movs	r0, r3
 8002006:	f001 f86b 	bl	80030e0 <HAL_GPIO_WritePin>
			TIM14->CR1 &= ~TIM_CR1_CEN;
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8002010:	2101      	movs	r1, #1
 8002012:	438a      	bics	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
			TIM16->CNT = MAX_TIME_NO_SENSING-Control.deadtime;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8002018:	885b      	ldrh	r3, [r3, #2]
 800201a:	001a      	movs	r2, r3
 800201c:	23fa      	movs	r3, #250	; 0xfa
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	1a9a      	subs	r2, r3, r2
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
			TIM16->CR1 |= TIM_CR1_CEN;
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
			TIM16->DIER |= (TIM_DIER_CC1IE);	//enable interrupt on TIM16 OC
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002038:	2102      	movs	r1, #2
 800203a:	430a      	orrs	r2, r1
 800203c:	60da      	str	r2, [r3, #12]

	}

	if (htim->Instance == TIM16)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d144      	bne.n	80020d2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
	{

			TIM16->CR1 &= ~TIM_CR1_CEN;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
			HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002054:	2301      	movs	r3, #1
 8002056:	425a      	negs	r2, r3
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f000 fa19 	bl	8002494 <HAL_ADC_PollForConversion>
			uint16_t tmp_adcVal = HAL_ADC_GetValue(&hadc);
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fb19 	bl	800269c <HAL_ADC_GetValue>
 800206a:	0002      	movs	r2, r0
 800206c:	210e      	movs	r1, #14
 800206e:	187b      	adds	r3, r7, r1
 8002070:	801a      	strh	r2, [r3, #0]
			if(tmp_adcVal > Control.ShiftForceADCLowTsh)
 8002072:	187b      	adds	r3, r7, r1
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8002078:	2104      	movs	r1, #4
 800207a:	5e52      	ldrsh	r2, [r2, r1]
 800207c:	4293      	cmp	r3, r2
 800207e:	dd1e      	ble.n	80020be <HAL_TIM_OC_DelayElapsedCallback+0xd6>
			{
				//TIM3->DIER &= ~(TIM_DIER_CC1IE | TIM_DIER_CC2IE);
				//TIM3->CNT = MAX_TIME_IGNITION_OFF-Control.CutoffTime; //in adc.c
				ADC1->CR |= ADC_CR_ADSTP;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002086:	2110      	movs	r1, #16
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
				ADC1->IER |= (ADC_IER_AWD1IE);
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
				ADC1->CR |= ADC_CR_ADEN;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
				ADC1->CR |= ADC_CR_ADSTART;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80020aa:	2104      	movs	r1, #4
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
				flag_adc_low_treshold = 0;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
				flag_adc_high_treshold = 0;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
				TIM16->CNT = MAX_TIME_NO_SENSING-DEFAULT_SECOND_RUN_TIME_NO_SENSING;
				TIM16->CR1 |= TIM_CR1_CEN;

			}
	}
}
 80020bc:	e009      	b.n	80020d2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
				TIM16->CNT = MAX_TIME_NO_SENSING-DEFAULT_SECOND_RUN_TIME_NO_SENSING;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80020c0:	22e1      	movs	r2, #225	; 0xe1
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
				TIM16->CR1 |= TIM_CR1_CEN;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40002000 	.word	0x40002000
 80020e0:	2000006c 	.word	0x2000006c
 80020e4:	40014400 	.word	0x40014400
 80020e8:	2000002c 	.word	0x2000002c
 80020ec:	40012400 	.word	0x40012400
 80020f0:	20000029 	.word	0x20000029
 80020f4:	20000028 	.word	0x20000028

080020f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <LoopForever+0x6>)
  ldr r1, =_edata
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <LoopForever+0xe>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002114:	4c0b      	ldr	r4, [pc, #44]	; (8002144 <LoopForever+0x16>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002122:	f7ff fdd5 	bl	8001cd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002126:	f002 fb21 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212a:	f7ff fc1b 	bl	8001964 <main>

0800212e <LoopForever>:

LoopForever:
    b LoopForever
 800212e:	e7fe      	b.n	800212e <LoopForever>
  ldr   r0, =_estack
 8002130:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800213c:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 8002140:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002144:	20000158 	.word	0x20000158

08002148 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <DMA1_Channel1_IRQHandler>
	...

0800214c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_Init+0x24>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_Init+0x24>)
 8002156:	2110      	movs	r1, #16
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800215c:	2000      	movs	r0, #0
 800215e:	f000 f809 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002162:	f7ff fd53 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_InitTick+0x5c>)
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_InitTick+0x60>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	0019      	movs	r1, r3
 8002186:	23fa      	movs	r3, #250	; 0xfa
 8002188:	0098      	lsls	r0, r3, #2
 800218a:	f7fd ffbd 	bl	8000108 <__udivsi3>
 800218e:	0003      	movs	r3, r0
 8002190:	0019      	movs	r1, r3
 8002192:	0020      	movs	r0, r4
 8002194:	f7fd ffb8 	bl	8000108 <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fe23 	bl	8002de6 <HAL_SYSTICK_Config>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e00f      	b.n	80021c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d80b      	bhi.n	80021c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	2301      	movs	r3, #1
 80021b2:	425b      	negs	r3, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fdf0 	bl	8002d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_InitTick+0x64>)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b003      	add	sp, #12
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_IncTick+0x1c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	001a      	movs	r2, r3
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_IncTick+0x20>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	18d2      	adds	r2, r2, r3
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_IncTick+0x20>)
 80021ee:	601a      	str	r2, [r3, #0]
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000154 	.word	0x20000154

08002200 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_GetTick+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	20000154 	.word	0x20000154

08002214 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221c:	230f      	movs	r3, #15
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e125      	b.n	800247e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2234      	movs	r2, #52	; 0x34
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff faa8 	bl	80017a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	2210      	movs	r2, #16
 8002256:	4013      	ands	r3, r2
 8002258:	d000      	beq.n	800225c <HAL_ADC_Init+0x48>
 800225a:	e103      	b.n	8002464 <HAL_ADC_Init+0x250>
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d000      	beq.n	8002268 <HAL_ADC_Init+0x54>
 8002266:	e0fd      	b.n	8002464 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002272:	d000      	beq.n	8002276 <HAL_ADC_Init+0x62>
 8002274:	e0f6      	b.n	8002464 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4a83      	ldr	r2, [pc, #524]	; (8002488 <HAL_ADC_Init+0x274>)
 800227c:	4013      	ands	r3, r2
 800227e:	2202      	movs	r2, #2
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2203      	movs	r2, #3
 800228e:	4013      	ands	r3, r2
 8002290:	2b01      	cmp	r3, #1
 8002292:	d112      	bne.n	80022ba <HAL_ADC_Init+0xa6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d009      	beq.n	80022b6 <HAL_ADC_Init+0xa2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	401a      	ands	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0xa6>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_ADC_Init+0xa8>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d116      	bne.n	80022ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2218      	movs	r2, #24
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	0899      	lsrs	r1, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4964      	ldr	r1, [pc, #400]	; (800248c <HAL_ADC_Init+0x278>)
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7e1b      	ldrb	r3, [r3, #24]
 8002302:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e5b      	ldrb	r3, [r3, #25]
 8002308:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800230a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7e9b      	ldrb	r3, [r3, #26]
 8002310:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002312:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	2b01      	cmp	r3, #1
 800231a:	d002      	beq.n	8002322 <HAL_ADC_Init+0x10e>
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	e000      	b.n	8002324 <HAL_ADC_Init+0x110>
 8002322:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002324:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800232a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_Init+0x124>
 8002334:	2304      	movs	r3, #4
 8002336:	e000      	b.n	800233a <HAL_ADC_Init+0x126>
 8002338:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800233a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2124      	movs	r1, #36	; 0x24
 8002340:	5c5b      	ldrb	r3, [r3, r1]
 8002342:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002344:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4313      	orrs	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7edb      	ldrb	r3, [r3, #27]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d115      	bne.n	8002380 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7e9b      	ldrb	r3, [r3, #26]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	0252      	lsls	r2, r2, #9
 8002362:	4313      	orrs	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	e00b      	b.n	8002380 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	2220      	movs	r2, #32
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	2201      	movs	r2, #1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	23c2      	movs	r3, #194	; 0xc2
 8002386:	33ff      	adds	r3, #255	; 0xff
 8002388:	429a      	cmp	r2, r3
 800238a:	d007      	beq.n	800239c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002394:	4313      	orrs	r3, r2
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d01b      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d017      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d013      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d00f      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00b      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d003      	beq.n	80023f0 <HAL_ADC_Init+0x1dc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2b07      	cmp	r3, #7
 80023ee:	d112      	bne.n	8002416 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2107      	movs	r1, #7
 80023fc:	438a      	bics	r2, r1
 80023fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	2207      	movs	r2, #7
 800240c:	401a      	ands	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_ADC_Init+0x27c>)
 800241e:	4013      	ands	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	d10b      	bne.n	800243e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	2203      	movs	r2, #3
 8002432:	4393      	bics	r3, r2
 8002434:	2201      	movs	r2, #1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800243c:	e01c      	b.n	8002478 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2212      	movs	r2, #18
 8002444:	4393      	bics	r3, r2
 8002446:	2210      	movs	r2, #16
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	2201      	movs	r2, #1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800245a:	230f      	movs	r3, #15
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002462:	e009      	b.n	8002478 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	2210      	movs	r2, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002470:	230f      	movs	r3, #15
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffffefd 	.word	0xfffffefd
 800248c:	fffe0219 	.word	0xfffe0219
 8002490:	833fffe7 	.word	0x833fffe7

08002494 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d102      	bne.n	80024ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80024a6:	2308      	movs	r3, #8
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e014      	b.n	80024d6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10b      	bne.n	80024d2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	2220      	movs	r2, #32
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2234      	movs	r2, #52	; 0x34
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80024d2:	230c      	movs	r3, #12
 80024d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024d6:	f7ff fe93 	bl	8002200 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024de:	e019      	b.n	8002514 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	d016      	beq.n	8002514 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_ADC_PollForConversion+0x68>
 80024ec:	f7ff fe88 	bl	8002200 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d20b      	bcs.n	8002514 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	2204      	movs	r2, #4
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2234      	movs	r2, #52	; 0x34
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e04a      	b.n	80025aa <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	d0df      	beq.n	80024e0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d12d      	bne.n	8002598 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002540:	2b00      	cmp	r3, #0
 8002542:	d129      	bne.n	8002598 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2208      	movs	r2, #8
 800254c:	4013      	ands	r3, r2
 800254e:	2b08      	cmp	r3, #8
 8002550:	d122      	bne.n	8002598 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d110      	bne.n	8002580 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	210c      	movs	r1, #12
 800256a:	438a      	bics	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_ADC_PollForConversion+0x120>)
 8002574:	4013      	ands	r3, r2
 8002576:	2201      	movs	r2, #1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
 800257e:	e00b      	b.n	8002598 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	2220      	movs	r2, #32
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2201      	movs	r2, #1
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7e1b      	ldrb	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	220c      	movs	r2, #12
 80025a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	fffffefe 	.word	0xfffffefe

080025b8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d156      	bne.n	8002682 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2234      	movs	r2, #52	; 0x34
 80025d8:	5c9b      	ldrb	r3, [r3, r2]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Start_IT+0x2a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e056      	b.n	8002690 <HAL_ADC_Start_IT+0xd8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2234      	movs	r2, #52	; 0x34
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7e5b      	ldrb	r3, [r3, #25]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d007      	beq.n	8002602 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80025f2:	230f      	movs	r3, #15
 80025f4:	18fc      	adds	r4, r7, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 faa7 	bl	8002b4c <ADC_Enable>
 80025fe:	0003      	movs	r3, r0
 8002600:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002602:	230f      	movs	r3, #15
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d13e      	bne.n	800268a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_ADC_Start_IT+0xe0>)
 8002612:	4013      	ands	r3, r2
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	0052      	lsls	r2, r2, #1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2234      	movs	r2, #52	; 0x34
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	221c      	movs	r2, #28
 8002632:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d110      	bne.n	800265e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2104      	movs	r1, #4
 8002648:	438a      	bics	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2118      	movs	r1, #24
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
          break;
 800265c:	e008      	b.n	8002670 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	211c      	movs	r1, #28
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
          break;
 800266e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2104      	movs	r1, #4
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e003      	b.n	800268a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002682:	230f      	movs	r3, #15
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b005      	add	sp, #20
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	fffff0fe 	.word	0xfffff0fe

0800269c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d106      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x24>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d00d      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d14f      	bne.n	8002786 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d148      	bne.n	8002786 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	2210      	movs	r2, #16
 80026fa:	4013      	ands	r3, r2
 80026fc:	d106      	bne.n	800270c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4013      	ands	r3, r2
 8002718:	d12d      	bne.n	8002776 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800271e:	2b00      	cmp	r3, #0
 8002720:	d129      	bne.n	8002776 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2208      	movs	r2, #8
 800272a:	4013      	ands	r3, r2
 800272c:	2b08      	cmp	r3, #8
 800272e:	d122      	bne.n	8002776 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2204      	movs	r2, #4
 8002738:	4013      	ands	r3, r2
 800273a:	d110      	bne.n	800275e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	210c      	movs	r1, #12
 8002748:	438a      	bics	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_ADC_IRQHandler+0x16c>)
 8002752:	4013      	ands	r3, r2
 8002754:	2201      	movs	r2, #1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
 800275c:	e00b      	b.n	8002776 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	2220      	movs	r2, #32
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	2201      	movs	r2, #1
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f853 	bl	8002824 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	4013      	ands	r3, r2
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d115      	bne.n	80027c0 <HAL_ADC_IRQHandler+0x10c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	4013      	ands	r3, r2
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d10e      	bne.n	80027c0 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0252      	lsls	r2, r2, #9
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7ff f842 	bl	800183c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2210      	movs	r2, #16
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d123      	bne.n	8002816 <HAL_ADC_IRQHandler+0x162>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2210      	movs	r2, #16
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d11c      	bne.n	8002816 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d006      	beq.n	80027f2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2202      	movs	r2, #2
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f813 	bl	8002834 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	601a      	str	r2, [r3, #0]
  }

}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	fffffefe 	.word	0xfffffefe

08002824 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284e:	230f      	movs	r3, #15
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	055b      	lsls	r3, r3, #21
 8002862:	429a      	cmp	r2, r3
 8002864:	d011      	beq.n	800288a <HAL_ADC_ConfigChannel+0x46>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d00d      	beq.n	800288a <HAL_ADC_ConfigChannel+0x46>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	2b02      	cmp	r3, #2
 8002874:	d009      	beq.n	800288a <HAL_ADC_ConfigChannel+0x46>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	2b03      	cmp	r3, #3
 800287c:	d005      	beq.n	800288a <HAL_ADC_ConfigChannel+0x46>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	2b04      	cmp	r3, #4
 8002884:	d001      	beq.n	800288a <HAL_ADC_ConfigChannel+0x46>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2234      	movs	r2, #52	; 0x34
 800288e:	5c9b      	ldrb	r3, [r3, r2]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x54>
 8002894:	2302      	movs	r3, #2
 8002896:	e0bb      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x1cc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2234      	movs	r2, #52	; 0x34
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d000      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x6a>
 80028ac:	e09f      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a59      	ldr	r2, [pc, #356]	; (8002a18 <HAL_ADC_ConfigChannel+0x1d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x76>
 80028b8:	e077      	b.n	80029aa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2201      	movs	r2, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	055b      	lsls	r3, r3, #21
 80028d8:	429a      	cmp	r2, r3
 80028da:	d037      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d033      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d02f      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d02b      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d027      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2b05      	cmp	r3, #5
 8002902:	d023      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	2b06      	cmp	r3, #6
 800290a:	d01f      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2b07      	cmp	r3, #7
 8002912:	d01b      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2107      	movs	r1, #7
 8002920:	400b      	ands	r3, r1
 8002922:	429a      	cmp	r2, r3
 8002924:	d012      	beq.n	800294c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2107      	movs	r1, #7
 8002932:	438a      	bics	r2, r1
 8002934:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6959      	ldr	r1, [r3, #20]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2207      	movs	r2, #7
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d003      	beq.n	800295c <HAL_ADC_ConfigChannel+0x118>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b11      	cmp	r3, #17
 800295a:	d152      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_ADC_ConfigChannel+0x1d8>)
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b10      	cmp	r3, #16
 8002966:	d102      	bne.n	800296e <HAL_ADC_ConfigChannel+0x12a>
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	e001      	b.n	8002972 <HAL_ADC_ConfigChannel+0x12e>
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	03db      	lsls	r3, r3, #15
 8002972:	4a2a      	ldr	r2, [pc, #168]	; (8002a1c <HAL_ADC_ConfigChannel+0x1d8>)
 8002974:	430b      	orrs	r3, r1
 8002976:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b10      	cmp	r3, #16
 800297e:	d140      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_ADC_ConfigChannel+0x1dc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4927      	ldr	r1, [pc, #156]	; (8002a24 <HAL_ADC_ConfigChannel+0x1e0>)
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fbbe 	bl	8000108 <__udivsi3>
 800298c:	0003      	movs	r3, r0
 800298e:	001a      	movs	r2, r3
 8002990:	0013      	movs	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	189b      	adds	r3, r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <HAL_ADC_ConfigChannel+0x158>
 80029a8:	e02b      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	4099      	lsls	r1, r3
 80029b8:	000b      	movs	r3, r1
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d003      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x190>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b11      	cmp	r3, #17
 80029d2:	d116      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_ADC_ConfigChannel+0x1d8>)
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1a0>
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x1e4>)
 80029e2:	e000      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1a2>
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_ADC_ConfigChannel+0x1e8>)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_ADC_ConfigChannel+0x1d8>)
 80029e8:	400a      	ands	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e009      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	2220      	movs	r2, #32
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80029fa:	230f      	movs	r3, #15
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2234      	movs	r2, #52	; 0x34
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a0a:	230f      	movs	r3, #15
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00001001 	.word	0x00001001
 8002a1c:	40012708 	.word	0x40012708
 8002a20:	20000000 	.word	0x20000000
 8002a24:	000f4240 	.word	0x000f4240
 8002a28:	ff7fffff 	.word	0xff7fffff
 8002a2c:	ffbfffff 	.word	0xffbfffff

08002a30 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3a:	2317      	movs	r3, #23
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2234      	movs	r2, #52	; 0x34
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_AnalogWDGConfig+0x20>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e074      	b.n	8002b3a <HAL_ADC_AnalogWDGConfig+0x10a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2234      	movs	r2, #52	; 0x34
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	d159      	bne.n	8002b18 <HAL_ADC_AnalogWDGConfig+0xe8>
    /* Configuration of analog watchdog:                                      */
    /*  - Set the analog watchdog enable mode: one or overall group of        */
    /*    channels.                                                           */
    /*  - Set the Analog watchdog channel (is not used if watchdog            */
    /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4935      	ldr	r1, [pc, #212]	; (8002b44 <HAL_ADC_AnalogWDGConfig+0x114>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_AWDEN  |
                                ADC_CFGR1_AWDCH   );
    
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
                               ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	069b      	lsls	r3, r3, #26
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]

    /* Shift the offset in function of the selected ADC resolution: Thresholds*/
    /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	2103      	movs	r1, #3
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
    
    /* Set the high and low thresholds */
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	491f      	ldr	r1, [pc, #124]	; (8002b48 <HAL_ADC_AnalogWDGConfig+0x118>)
 8002aca:	400a      	ands	r2, r1
 8002acc:	621a      	str	r2, [r3, #32]
    hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a19      	ldr	r1, [r3, #32]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]
                             tmpAWDLowThresholdShifted                           );
    
    /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
    /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
    /* or HAL_ADC_PollForEvent().                                             */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	601a      	str	r2, [r3, #0]
    
    /* Configure ADC Analog watchdog interrupt */
    if(AnalogWDGConfig->ITMode == ENABLE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	7a1b      	ldrb	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_ADC_AnalogWDGConfig+0xd6>
    {
      /* Enable the ADC Analog watchdog interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e012      	b.n	8002b2c <HAL_ADC_AnalogWDGConfig+0xfc>
    }
    else
    {
      /* Disable the ADC Analog watchdog interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	438a      	bics	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e009      	b.n	8002b2c <HAL_ADC_AnalogWDGConfig+0xfc>
  /* If a conversion is on going on regular group, no update could be done    */
  /* on neither of the AWD configuration structure parameters.                */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002b24:	2317      	movs	r3, #23
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2234      	movs	r2, #52	; 0x34
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b34:	2317      	movs	r3, #23
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	833fffff 	.word	0x833fffff
 8002b48:	f000f000 	.word	0xf000f000

08002b4c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2203      	movs	r2, #3
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d112      	bne.n	8002b90 <ADC_Enable+0x44>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d009      	beq.n	8002b8c <ADC_Enable+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	401a      	ands	r2, r3
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d101      	bne.n	8002b90 <ADC_Enable+0x44>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <ADC_Enable+0x46>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d14b      	bne.n	8002c2e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <ADC_Enable+0xec>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e038      	b.n	8002c30 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <ADC_Enable+0xf0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <ADC_Enable+0xf4>)
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7fd fa97 	bl	8000108 <__udivsi3>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bde:	e002      	b.n	8002be6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bec:	f7ff fb08 	bl	8002200 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bf4:	e014      	b.n	8002c20 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bf6:	f7ff fb03 	bl	8002200 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d90d      	bls.n	8002c20 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	2210      	movs	r2, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	2201      	movs	r2, #1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d1e3      	bne.n	8002bf6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	80000017 	.word	0x80000017
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	000f4240 	.word	0x000f4240

08002c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d809      	bhi.n	8002c6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	231f      	movs	r3, #31
 8002c60:	401a      	ands	r2, r3
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_EnableIRQ+0x30>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	4091      	lsls	r1, r2
 8002c68:	000a      	movs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
  }
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	0002      	movs	r2, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8c:	d828      	bhi.n	8002ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c8e:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <__NVIC_SetPriority+0xd4>)
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	33c0      	adds	r3, #192	; 0xc0
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	589b      	ldr	r3, [r3, r2]
 8002c9e:	1dfa      	adds	r2, r7, #7
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	00d2      	lsls	r2, r2, #3
 8002caa:	21ff      	movs	r1, #255	; 0xff
 8002cac:	4091      	lsls	r1, r2
 8002cae:	000a      	movs	r2, r1
 8002cb0:	43d2      	mvns	r2, r2
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	22ff      	movs	r2, #255	; 0xff
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	4003      	ands	r3, r0
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ccc:	481f      	ldr	r0, [pc, #124]	; (8002d4c <__NVIC_SetPriority+0xd4>)
 8002cce:	1dfb      	adds	r3, r7, #7
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	33c0      	adds	r3, #192	; 0xc0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cde:	e031      	b.n	8002d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <__NVIC_SetPriority+0xd8>)
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	230f      	movs	r3, #15
 8002cea:	400b      	ands	r3, r1
 8002cec:	3b08      	subs	r3, #8
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3306      	adds	r3, #6
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	18d3      	adds	r3, r2, r3
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1dfa      	adds	r2, r7, #7
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	0011      	movs	r1, r2
 8002d00:	2203      	movs	r2, #3
 8002d02:	400a      	ands	r2, r1
 8002d04:	00d2      	lsls	r2, r2, #3
 8002d06:	21ff      	movs	r1, #255	; 0xff
 8002d08:	4091      	lsls	r1, r2
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	43d2      	mvns	r2, r2
 8002d0e:	401a      	ands	r2, r3
 8002d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	401a      	ands	r2, r3
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	2303      	movs	r3, #3
 8002d22:	4003      	ands	r3, r0
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <__NVIC_SetPriority+0xd8>)
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	001c      	movs	r4, r3
 8002d30:	230f      	movs	r3, #15
 8002d32:	4023      	ands	r3, r4
 8002d34:	3b08      	subs	r3, #8
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	3306      	adds	r3, #6
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	18c3      	adds	r3, r0, r3
 8002d40:	3304      	adds	r3, #4
 8002d42:	601a      	str	r2, [r3, #0]
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b003      	add	sp, #12
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	045b      	lsls	r3, r3, #17
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d301      	bcc.n	8002d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e010      	b.n	8002d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <SysTick_Config+0x44>)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	3a01      	subs	r2, #1
 8002d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d74:	2301      	movs	r3, #1
 8002d76:	425b      	negs	r3, r3
 8002d78:	2103      	movs	r1, #3
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff ff7c 	bl	8002c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x44>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x44>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	210f      	movs	r1, #15
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	1c02      	adds	r2, r0, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff ff5d 	bl	8002c78 <__NVIC_SetPriority>
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	0002      	movs	r2, r0
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff ff33 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff ffaf 	bl	8002d54 <SysTick_Config>
 8002df6:	0003      	movs	r3, r0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	e14f      	b.n	80030b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4091      	lsls	r1, r2
 8002e1a:	000a      	movs	r2, r1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d100      	bne.n	8002e28 <HAL_GPIO_Init+0x28>
 8002e26:	e140      	b.n	80030aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d00b      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3c:	2b11      	cmp	r3, #17
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b12      	cmp	r3, #18
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	409a      	lsls	r2, r3
 8002e56:	0013      	movs	r3, r2
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	43da      	mvns	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	2201      	movs	r2, #1
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	0013      	movs	r3, r2
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0xea>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b12      	cmp	r3, #18
 8002ee8:	d123      	bne.n	8002f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	58d3      	ldr	r3, [r2, r3]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2207      	movs	r2, #7
 8002efc:	4013      	ands	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0013      	movs	r3, r2
 8002f06:	43da      	mvns	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2107      	movs	r1, #7
 8002f16:	400b      	ands	r3, r1
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	0013      	movs	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	0092      	lsls	r2, r2, #2
 8002f2e:	6939      	ldr	r1, [r7, #16]
 8002f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	0013      	movs	r3, r2
 8002f42:	43da      	mvns	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	401a      	ands	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	0013      	movs	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	055b      	lsls	r3, r3, #21
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d100      	bne.n	8002f74 <HAL_GPIO_Init+0x174>
 8002f72:	e09a      	b.n	80030aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f74:	4b54      	ldr	r3, [pc, #336]	; (80030c8 <HAL_GPIO_Init+0x2c8>)
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_GPIO_Init+0x2c8>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	619a      	str	r2, [r3, #24]
 8002f80:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_GPIO_Init+0x2c8>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f8c:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_GPIO_Init+0x2cc>)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	589b      	ldr	r3, [r3, r2]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	2390      	movs	r3, #144	; 0x90
 8002fb4:	05db      	lsls	r3, r3, #23
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x1e2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a44      	ldr	r2, [pc, #272]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x1de>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <HAL_GPIO_Init+0x2d4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x1da>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_GPIO_Init+0x2d8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x1d6>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e004      	b.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	400a      	ands	r2, r1
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ff4:	4935      	ldr	r1, [pc, #212]	; (80030cc <HAL_GPIO_Init+0x2cc>)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43da      	mvns	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	4013      	ands	r3, r2
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43da      	mvns	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	029b      	lsls	r3, r3, #10
 8003044:	4013      	ands	r3, r2
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43da      	mvns	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	035b      	lsls	r3, r3, #13
 800306e:	4013      	ands	r3, r2
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43da      	mvns	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	039b      	lsls	r3, r3, #14
 8003098:	4013      	ands	r3, r2
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_GPIO_Init+0x2dc>)
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	40da      	lsrs	r2, r3
 80030b8:	1e13      	subs	r3, r2, #0
 80030ba:	d000      	beq.n	80030be <HAL_GPIO_Init+0x2be>
 80030bc:	e6a8      	b.n	8002e10 <HAL_GPIO_Init+0x10>
  } 
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40010000 	.word	0x40010000
 80030d0:	48000400 	.word	0x48000400
 80030d4:	48000800 	.word	0x48000800
 80030d8:	48000c00 	.word	0x48000c00
 80030dc:	40010400 	.word	0x40010400

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	0008      	movs	r0, r1
 80030ea:	0011      	movs	r1, r2
 80030ec:	1cbb      	adds	r3, r7, #2
 80030ee:	1c02      	adds	r2, r0, #0
 80030f0:	801a      	strh	r2, [r3, #0]
 80030f2:	1c7b      	adds	r3, r7, #1
 80030f4:	1c0a      	adds	r2, r1, #0
 80030f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f8:	1c7b      	adds	r3, r7, #1
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003100:	1cbb      	adds	r3, r7, #2
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003108:	e003      	b.n	8003112 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800310a:	1cbb      	adds	r3, r7, #2
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e301      	b.n	8003732 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x1e>
 8003138:	e08d      	b.n	8003256 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800313a:	4bc3      	ldr	r3, [pc, #780]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	220c      	movs	r2, #12
 8003140:	4013      	ands	r3, r2
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00e      	beq.n	8003164 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003146:	4bc0      	ldr	r3, [pc, #768]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	220c      	movs	r2, #12
 800314c:	4013      	ands	r3, r2
 800314e:	2b08      	cmp	r3, #8
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x64>
 8003152:	4bbd      	ldr	r3, [pc, #756]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	025b      	lsls	r3, r3, #9
 800315a:	401a      	ands	r2, r3
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	429a      	cmp	r2, r3
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	4bb8      	ldr	r3, [pc, #736]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	029b      	lsls	r3, r3, #10
 800316c:	4013      	ands	r3, r2
 800316e:	d100      	bne.n	8003172 <HAL_RCC_OscConfig+0x56>
 8003170:	e070      	b.n	8003254 <HAL_RCC_OscConfig+0x138>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d000      	beq.n	800317c <HAL_RCC_OscConfig+0x60>
 800317a:	e06b      	b.n	8003254 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e2d8      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x7c>
 8003188:	4baf      	ldr	r3, [pc, #700]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4bae      	ldr	r3, [pc, #696]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	0249      	lsls	r1, r1, #9
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e02f      	b.n	80031f8 <HAL_RCC_OscConfig+0xdc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x9e>
 80031a0:	4ba9      	ldr	r3, [pc, #676]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4ba8      	ldr	r3, [pc, #672]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031a6:	49a9      	ldr	r1, [pc, #676]	; (800344c <HAL_RCC_OscConfig+0x330>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	4ba6      	ldr	r3, [pc, #664]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4ba5      	ldr	r3, [pc, #660]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	49a7      	ldr	r1, [pc, #668]	; (8003450 <HAL_RCC_OscConfig+0x334>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e01e      	b.n	80031f8 <HAL_RCC_OscConfig+0xdc>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10e      	bne.n	80031e0 <HAL_RCC_OscConfig+0xc4>
 80031c2:	4ba1      	ldr	r3, [pc, #644]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4ba0      	ldr	r3, [pc, #640]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	02c9      	lsls	r1, r1, #11
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	4b9d      	ldr	r3, [pc, #628]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b9c      	ldr	r3, [pc, #624]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	0249      	lsls	r1, r1, #9
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xdc>
 80031e0:	4b99      	ldr	r3, [pc, #612]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b98      	ldr	r3, [pc, #608]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	4999      	ldr	r1, [pc, #612]	; (800344c <HAL_RCC_OscConfig+0x330>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b95      	ldr	r3, [pc, #596]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80031f2:	4997      	ldr	r1, [pc, #604]	; (8003450 <HAL_RCC_OscConfig+0x334>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fffe 	bl	8002200 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320a:	f7fe fff9 	bl	8002200 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e28a      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	029b      	lsls	r3, r3, #10
 8003224:	4013      	ands	r3, r2
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0xee>
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe ffe9 	bl	8002200 <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe ffe4 	bl	8002200 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e275      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	4b80      	ldr	r3, [pc, #512]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	4013      	ands	r3, r2
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x118>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d100      	bne.n	8003262 <HAL_RCC_OscConfig+0x146>
 8003260:	e069      	b.n	8003336 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003262:	4b79      	ldr	r3, [pc, #484]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	220c      	movs	r2, #12
 8003268:	4013      	ands	r3, r2
 800326a:	d00b      	beq.n	8003284 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800326c:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	220c      	movs	r2, #12
 8003272:	4013      	ands	r3, r2
 8003274:	2b08      	cmp	r3, #8
 8003276:	d11c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x196>
 8003278:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	025b      	lsls	r3, r3, #9
 8003280:	4013      	ands	r3, r2
 8003282:	d116      	bne.n	80032b2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e24b      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	22f8      	movs	r2, #248	; 0xf8
 80032a0:	4393      	bics	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00da      	lsls	r2, r3, #3
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b0:	e041      	b.n	8003336 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d024      	beq.n	8003304 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe ff9b 	bl	8002200 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fe ff96 	bl	8002200 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e227      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0f1      	beq.n	80032d0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b56      	ldr	r3, [pc, #344]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	22f8      	movs	r2, #248	; 0xf8
 80032f2:	4393      	bics	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00da      	lsls	r2, r3, #3
 80032fc:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e018      	b.n	8003336 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800330a:	2101      	movs	r1, #1
 800330c:	438a      	bics	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe ff76 	bl	8002200 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe ff71 	bl	8002200 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e202      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332c:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d1f1      	bne.n	800331a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2208      	movs	r2, #8
 800333c:	4013      	ands	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d019      	beq.n	800337c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003348:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800334a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800334e:	2101      	movs	r1, #1
 8003350:	430a      	orrs	r2, r1
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe ff54 	bl	8002200 <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335e:	f7fe ff4f 	bl	8002200 <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1e0      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003370:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d0f1      	beq.n	800335e <HAL_RCC_OscConfig+0x242>
 800337a:	e018      	b.n	80033ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800337e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003382:	2101      	movs	r1, #1
 8003384:	438a      	bics	r2, r1
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe ff3a 	bl	8002200 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003392:	f7fe ff35 	bl	8002200 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1c6      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2202      	movs	r2, #2
 80033aa:	4013      	ands	r3, r2
 80033ac:	d1f1      	bne.n	8003392 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2204      	movs	r2, #4
 80033b4:	4013      	ands	r3, r2
 80033b6:	d100      	bne.n	80033ba <HAL_RCC_OscConfig+0x29e>
 80033b8:	e0b4      	b.n	8003524 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	201f      	movs	r0, #31
 80033bc:	183b      	adds	r3, r7, r0
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	055b      	lsls	r3, r3, #21
 80033ca:	4013      	ands	r3, r2
 80033cc:	d110      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	0549      	lsls	r1, r1, #21
 80033d8:	430a      	orrs	r2, r1
 80033da:	61da      	str	r2, [r3, #28]
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	055b      	lsls	r3, r3, #21
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ea:	183b      	adds	r3, r7, r0
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_OscConfig+0x338>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d11a      	bne.n	8003432 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x338>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCC_OscConfig+0x338>)
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	0049      	lsls	r1, r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fe fef9 	bl	8002200 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe fef4 	bl	8002200 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e185      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x338>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10e      	bne.n	8003458 <HAL_RCC_OscConfig+0x33c>
 800343a:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	4b02      	ldr	r3, [pc, #8]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	621a      	str	r2, [r3, #32]
 8003446:	e035      	b.n	80034b4 <HAL_RCC_OscConfig+0x398>
 8003448:	40021000 	.word	0x40021000
 800344c:	fffeffff 	.word	0xfffeffff
 8003450:	fffbffff 	.word	0xfffbffff
 8003454:	40007000 	.word	0x40007000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10c      	bne.n	800347a <HAL_RCC_OscConfig+0x35e>
 8003460:	4bb6      	ldr	r3, [pc, #728]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	4bb5      	ldr	r3, [pc, #724]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003466:	2101      	movs	r1, #1
 8003468:	438a      	bics	r2, r1
 800346a:	621a      	str	r2, [r3, #32]
 800346c:	4bb3      	ldr	r3, [pc, #716]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	4bb2      	ldr	r3, [pc, #712]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003472:	2104      	movs	r1, #4
 8003474:	438a      	bics	r2, r1
 8003476:	621a      	str	r2, [r3, #32]
 8003478:	e01c      	b.n	80034b4 <HAL_RCC_OscConfig+0x398>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x380>
 8003482:	4bae      	ldr	r3, [pc, #696]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	4bad      	ldr	r3, [pc, #692]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003488:	2104      	movs	r1, #4
 800348a:	430a      	orrs	r2, r1
 800348c:	621a      	str	r2, [r3, #32]
 800348e:	4bab      	ldr	r3, [pc, #684]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	4baa      	ldr	r3, [pc, #680]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	621a      	str	r2, [r3, #32]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0x398>
 800349c:	4ba7      	ldr	r3, [pc, #668]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	4ba6      	ldr	r3, [pc, #664]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	438a      	bics	r2, r1
 80034a6:	621a      	str	r2, [r3, #32]
 80034a8:	4ba4      	ldr	r3, [pc, #656]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	4ba3      	ldr	r3, [pc, #652]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80034ae:	2104      	movs	r1, #4
 80034b0:	438a      	bics	r2, r1
 80034b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d014      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fea0 	bl	8002200 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fe fe9b 	bl	8002200 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a9b      	ldr	r2, [pc, #620]	; (8003740 <HAL_RCC_OscConfig+0x624>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e12b      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b98      	ldr	r3, [pc, #608]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	2202      	movs	r2, #2
 80034e0:	4013      	ands	r3, r2
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
 80034e4:	e013      	b.n	800350e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fe8b 	bl	8002200 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	e009      	b.n	8003504 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe fe86 	bl	8002200 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4a91      	ldr	r2, [pc, #580]	; (8003740 <HAL_RCC_OscConfig+0x624>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e116      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	2202      	movs	r2, #2
 800350a:	4013      	ands	r3, r2
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800350e:	231f      	movs	r3, #31
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	4b87      	ldr	r3, [pc, #540]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800351e:	4989      	ldr	r1, [pc, #548]	; (8003744 <HAL_RCC_OscConfig+0x628>)
 8003520:	400a      	ands	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	4013      	ands	r3, r2
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d12a      	bne.n	800358c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003536:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353a:	4b80      	ldr	r3, [pc, #512]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800353c:	2104      	movs	r1, #4
 800353e:	430a      	orrs	r2, r1
 8003540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003542:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003548:	2101      	movs	r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe fe57 	bl	8002200 <HAL_GetTick>
 8003552:	0003      	movs	r3, r0
 8003554:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003558:	f7fe fe52 	bl	8002200 <HAL_GetTick>
 800355c:	0002      	movs	r2, r0
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0e3      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800356a:	4b74      	ldr	r3, [pc, #464]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	2202      	movs	r2, #2
 8003570:	4013      	ands	r3, r2
 8003572:	d0f1      	beq.n	8003558 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	22f8      	movs	r2, #248	; 0xf8
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	00da      	lsls	r2, r3, #3
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003586:	430a      	orrs	r2, r1
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
 800358a:	e034      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	3305      	adds	r3, #5
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003594:	4b69      	ldr	r3, [pc, #420]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800359a:	2104      	movs	r1, #4
 800359c:	438a      	bics	r2, r1
 800359e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	22f8      	movs	r2, #248	; 0xf8
 80035a6:	4393      	bics	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	00da      	lsls	r2, r3, #3
 80035b0:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
 80035b6:	e01e      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035b8:	4b60      	ldr	r3, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035bc:	4b5f      	ldr	r3, [pc, #380]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035be:	2104      	movs	r1, #4
 80035c0:	430a      	orrs	r2, r1
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80035c4:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	438a      	bics	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d0:	f7fe fe16 	bl	8002200 <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035da:	f7fe fe11 	bl	8002200 <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0a2      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80035ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f0:	2202      	movs	r2, #2
 80035f2:	4013      	ands	r3, r2
 80035f4:	d1f1      	bne.n	80035da <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d100      	bne.n	8003600 <HAL_RCC_OscConfig+0x4e4>
 80035fe:	e097      	b.n	8003730 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003600:	4b4e      	ldr	r3, [pc, #312]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	220c      	movs	r2, #12
 8003606:	4013      	ands	r3, r2
 8003608:	2b08      	cmp	r3, #8
 800360a:	d100      	bne.n	800360e <HAL_RCC_OscConfig+0x4f2>
 800360c:	e06b      	b.n	80036e6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d14c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b48      	ldr	r3, [pc, #288]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800361c:	494a      	ldr	r1, [pc, #296]	; (8003748 <HAL_RCC_OscConfig+0x62c>)
 800361e:	400a      	ands	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fded 	bl	8002200 <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe fde8 	bl	8002200 <HAL_GetTick>
 8003630:	0002      	movs	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e079      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	049b      	lsls	r3, r3, #18
 8003646:	4013      	ands	r3, r2
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364a:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	220f      	movs	r2, #15
 8003650:	4393      	bics	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCC_OscConfig+0x630>)
 8003664:	4013      	ands	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	431a      	orrs	r2, r3
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x620>)
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b2f      	ldr	r3, [pc, #188]	; (800373c <HAL_RCC_OscConfig+0x620>)
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	0449      	lsls	r1, r1, #17
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fdbb 	bl	8002200 <HAL_GetTick>
 800368a:	0003      	movs	r3, r0
 800368c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe fdb6 	bl	8002200 <HAL_GetTick>
 8003694:	0002      	movs	r2, r0
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e047      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	049b      	lsls	r3, r3, #18
 80036aa:	4013      	ands	r3, r2
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x574>
 80036ae:	e03f      	b.n	8003730 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036b6:	4924      	ldr	r1, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x62c>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fda0 	bl	8002200 <HAL_GetTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe fd9b 	bl	8002200 <HAL_GetTick>
 80036ca:	0002      	movs	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e02c      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	049b      	lsls	r3, r3, #18
 80036e0:	4013      	ands	r3, r2
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x5aa>
 80036e4:	e024      	b.n	8003730 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01f      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x620>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	025b      	lsls	r3, r3, #9
 8003704:	401a      	ands	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	429a      	cmp	r2, r3
 800370c:	d10e      	bne.n	800372c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	220f      	movs	r2, #15
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	23f0      	movs	r3, #240	; 0xf0
 8003720:	039b      	lsls	r3, r3, #14
 8003722:	401a      	ands	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b008      	add	sp, #32
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	40021000 	.word	0x40021000
 8003740:	00001388 	.word	0x00001388
 8003744:	efffffff 	.word	0xefffffff
 8003748:	feffffff 	.word	0xfeffffff
 800374c:	ffc2ffff 	.word	0xffc2ffff

08003750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b3      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d911      	bls.n	8003796 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b58      	ldr	r3, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	4393      	bics	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e09a      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d015      	beq.n	80037cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	d006      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037aa:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037b0:	21e0      	movs	r1, #224	; 0xe0
 80037b2:	00c9      	lsls	r1, r1, #3
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	22f0      	movs	r2, #240	; 0xf0
 80037be:	4393      	bics	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4013      	ands	r3, r2
 80037e8:	d114      	bne.n	8003814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06e      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	049b      	lsls	r3, r3, #18
 80037fe:	4013      	ands	r3, r2
 8003800:	d108      	bne.n	8003814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e062      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e05b      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2203      	movs	r2, #3
 800381a:	4393      	bics	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe fcea 	bl	8002200 <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003830:	e009      	b.n	8003846 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003832:	f7fe fce5 	bl	8002200 <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <HAL_RCC_ClockConfig+0x18c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e042      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	220c      	movs	r2, #12
 800384c:	401a      	ands	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1ec      	bne.n	8003832 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d211      	bcs.n	800388a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2201      	movs	r2, #1
 800386c:	4393      	bics	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x184>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	4013      	ands	r3, r2
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e020      	b.n	80038cc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2204      	movs	r2, #4
 8003890:	4013      	ands	r3, r2
 8003892:	d009      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <HAL_RCC_ClockConfig+0x190>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038a8:	f000 f820 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038ac:	0001      	movs	r1, r0
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x188>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	220f      	movs	r2, #15
 80038b6:	4013      	ands	r3, r2
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x194>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	000a      	movs	r2, r1
 80038be:	40da      	lsrs	r2, r3
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x198>)
 80038c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7fe fc55 	bl	8002174 <HAL_InitTick>
  
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	00001388 	.word	0x00001388
 80038e0:	fffff8ff 	.word	0xfffff8ff
 80038e4:	0800483c 	.word	0x0800483c
 80038e8:	20000000 	.word	0x20000000

080038ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b08f      	sub	sp, #60	; 0x3c
 80038f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80038f2:	2314      	movs	r3, #20
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	4a2b      	ldr	r2, [pc, #172]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038fa:	c313      	stmia	r3!, {r0, r1, r4}
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003904:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003906:	c313      	stmia	r3!, {r0, r1, r4}
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
 8003914:	2300      	movs	r3, #0
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	220c      	movs	r2, #12
 800392a:	4013      	ands	r3, r2
 800392c:	2b04      	cmp	r3, #4
 800392e:	d002      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x4a>
 8003930:	2b08      	cmp	r3, #8
 8003932:	d003      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x50>
 8003934:	e02d      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800393a:	e02d      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	220f      	movs	r2, #15
 8003942:	4013      	ands	r3, r2
 8003944:	2214      	movs	r2, #20
 8003946:	18ba      	adds	r2, r7, r2
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	220f      	movs	r2, #15
 8003952:	4013      	ands	r3, r2
 8003954:	1d3a      	adds	r2, r7, #4
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003966:	4812      	ldr	r0, [pc, #72]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003968:	f7fc fbce 	bl	8000108 <__udivsi3>
 800396c:	0003      	movs	r3, r0
 800396e:	001a      	movs	r2, r3
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	4353      	muls	r3, r2
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
 8003976:	e009      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397a:	000a      	movs	r2, r1
 800397c:	0152      	lsls	r2, r2, #5
 800397e:	1a52      	subs	r2, r2, r1
 8003980:	0193      	lsls	r3, r2, #6
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	185b      	adds	r3, r3, r1
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003996:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b00f      	add	sp, #60	; 0x3c
 80039a0:	bd90      	pop	{r4, r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	080047dc 	.word	0x080047dc
 80039a8:	080047ec 	.word	0x080047ec
 80039ac:	40021000 	.word	0x40021000
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e042      	b.n	8003a50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	223d      	movs	r2, #61	; 0x3d
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223c      	movs	r2, #60	; 0x3c
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fe faa5 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	223d      	movs	r2, #61	; 0x3d
 80039ea:	2102      	movs	r1, #2
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	0019      	movs	r1, r3
 80039f8:	0010      	movs	r0, r2
 80039fa:	f000 fb11 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2246      	movs	r2, #70	; 0x46
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223e      	movs	r2, #62	; 0x3e
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223f      	movs	r2, #63	; 0x3f
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2241      	movs	r2, #65	; 0x41
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2242      	movs	r2, #66	; 0x42
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2243      	movs	r2, #67	; 0x43
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2244      	movs	r2, #68	; 0x44
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2245      	movs	r2, #69	; 0x45
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223d      	movs	r2, #61	; 0x3d
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e028      	b.n	8003ac2 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	223d      	movs	r2, #61	; 0x3d
 8003a74:	2102      	movs	r1, #2
 8003a76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <HAL_TIM_Base_Start+0x74>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIM_Base_Start+0x34>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <HAL_TIM_Base_Start+0x78>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d111      	bne.n	8003ab0 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2207      	movs	r2, #7
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d010      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	e007      	b.n	8003ac0 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40000400 	.word	0x40000400

08003ad4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e042      	b.n	8003b6c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	223d      	movs	r2, #61	; 0x3d
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	223c      	movs	r2, #60	; 0x3c
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f839 	bl	8003b74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223d      	movs	r2, #61	; 0x3d
 8003b06:	2102      	movs	r1, #2
 8003b08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	0019      	movs	r1, r3
 8003b14:	0010      	movs	r0, r2
 8003b16:	f000 fa83 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2246      	movs	r2, #70	; 0x46
 8003b1e:	2101      	movs	r1, #1
 8003b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223e      	movs	r2, #62	; 0x3e
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	223f      	movs	r2, #63	; 0x3f
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2241      	movs	r2, #65	; 0x41
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2242      	movs	r2, #66	; 0x42
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2243      	movs	r2, #67	; 0x43
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2244      	movs	r2, #68	; 0x44
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2245      	movs	r2, #69	; 0x45
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	223d      	movs	r2, #61	; 0x3d
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2202      	movs	r2, #2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d124      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d11d      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2203      	movs	r2, #3
 8003bae:	4252      	negs	r2, r2
 8003bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 fa12 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e007      	b.n	8003bde <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fe fa09 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fa11 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2204      	movs	r2, #4
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d125      	bne.n	8003c3e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d11e      	bne.n	8003c3e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2205      	movs	r2, #5
 8003c06:	4252      	negs	r2, r2
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	23c0      	movs	r3, #192	; 0xc0
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 f9e5 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003c26:	e007      	b.n	8003c38 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fe f9dc 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f9e4 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2208      	movs	r2, #8
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d124      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11d      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2209      	movs	r2, #9
 8003c60:	4252      	negs	r2, r2
 8003c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2204      	movs	r2, #4
 8003c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2203      	movs	r2, #3
 8003c72:	4013      	ands	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 f9b9 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e007      	b.n	8003c90 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7fe f9b0 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 f9b8 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d125      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2210      	movs	r2, #16
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d11e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2211      	movs	r2, #17
 8003cb8:	4252      	negs	r2, r2
 8003cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	23c0      	movs	r3, #192	; 0xc0
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 f98c 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e007      	b.n	8003cea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fe f983 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f98b 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10f      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2202      	movs	r2, #2
 8003d12:	4252      	negs	r2, r2
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 f961 	bl	8003fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d10f      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d108      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2281      	movs	r2, #129	; 0x81
 8003d40:	4252      	negs	r2, r2
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 fd08 	bl	800475c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d10f      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d108      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2241      	movs	r2, #65	; 0x41
 8003d6e:	4252      	negs	r2, r2
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f94b 	bl	8004010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2220      	movs	r2, #32
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d10f      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d108      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2221      	movs	r2, #33	; 0x21
 8003d9c:	4252      	negs	r2, r2
 8003d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 fcd2 	bl	800474c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	223c      	movs	r2, #60	; 0x3c
 8003dc0:	5c9b      	ldrb	r3, [r3, r2]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_OC_ConfigChannel+0x1a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e03c      	b.n	8003e44 <HAL_TIM_OC_ConfigChannel+0x94>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	223c      	movs	r2, #60	; 0x3c
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d027      	beq.n	8003e28 <HAL_TIM_OC_ConfigChannel+0x78>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d82c      	bhi.n	8003e38 <HAL_TIM_OC_ConfigChannel+0x88>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d019      	beq.n	8003e18 <HAL_TIM_OC_ConfigChannel+0x68>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d826      	bhi.n	8003e38 <HAL_TIM_OC_ConfigChannel+0x88>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_TIM_OC_ConfigChannel+0x48>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d008      	beq.n	8003e08 <HAL_TIM_OC_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8003df6:	e01f      	b.n	8003e38 <HAL_TIM_OC_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f979 	bl	80040f8 <TIM_OC1_SetConfig>
      break;
 8003e06:	e018      	b.n	8003e3a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f000 f9ef 	bl	80041f4 <TIM_OC2_SetConfig>
      break;
 8003e16:	e010      	b.n	8003e3a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fa65 	bl	80042f0 <TIM_OC3_SetConfig>
      break;
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	0011      	movs	r1, r2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 fadd 	bl	80043f0 <TIM_OC4_SetConfig>
      break;
 8003e36:	e000      	b.n	8003e3a <HAL_TIM_OC_ConfigChannel+0x8a>
      break;
 8003e38:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	223c      	movs	r2, #60	; 0x3c
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223c      	movs	r2, #60	; 0x3c
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_ConfigClockSource+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0b7      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0x188>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223c      	movs	r2, #60	; 0x3c
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223d      	movs	r2, #61	; 0x3d
 8003e70:	2102      	movs	r1, #2
 8003e72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2277      	movs	r2, #119	; 0x77
 8003e80:	4393      	bics	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a55      	ldr	r2, [pc, #340]	; (8003fdc <HAL_TIM_ConfigClockSource+0x190>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	0192      	lsls	r2, r2, #6
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0xd6>
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	0192      	lsls	r2, r2, #6
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d900      	bls.n	8003eaa <HAL_TIM_ConfigClockSource+0x5e>
 8003ea8:	e088      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	0152      	lsls	r2, r2, #5
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x68>
 8003eb2:	e085      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	0152      	lsls	r2, r2, #5
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d900      	bls.n	8003ebe <HAL_TIM_ConfigClockSource+0x72>
 8003ebc:	e07e      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ebe:	2b70      	cmp	r3, #112	; 0x70
 8003ec0:	d018      	beq.n	8003ef4 <HAL_TIM_ConfigClockSource+0xa8>
 8003ec2:	d900      	bls.n	8003ec6 <HAL_TIM_ConfigClockSource+0x7a>
 8003ec4:	e07a      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ec6:	2b60      	cmp	r3, #96	; 0x60
 8003ec8:	d04f      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x11e>
 8003eca:	d900      	bls.n	8003ece <HAL_TIM_ConfigClockSource+0x82>
 8003ecc:	e076      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ece:	2b50      	cmp	r3, #80	; 0x50
 8003ed0:	d03b      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xfe>
 8003ed2:	d900      	bls.n	8003ed6 <HAL_TIM_ConfigClockSource+0x8a>
 8003ed4:	e072      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d057      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x13e>
 8003eda:	d900      	bls.n	8003ede <HAL_TIM_ConfigClockSource+0x92>
 8003edc:	e06e      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d063      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x15e>
 8003ee2:	d86b      	bhi.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d060      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x15e>
 8003ee8:	d868      	bhi.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d05d      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x15e>
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d05b      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ef2:	e063      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6899      	ldr	r1, [r3, #8]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f000 fb52 	bl	80045ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2277      	movs	r2, #119	; 0x77
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	609a      	str	r2, [r3, #8]
      break;
 8003f20:	e04f      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6899      	ldr	r1, [r3, #8]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f000 fb3b 	bl	80045ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	01c9      	lsls	r1, r1, #7
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
      break;
 8003f48:	e03b      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	001a      	movs	r2, r3
 8003f58:	f000 faae 	bl	80044b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2150      	movs	r1, #80	; 0x50
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fb08 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8003f68:	e02b      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	001a      	movs	r2, r3
 8003f78:	f000 facc 	bl	8004514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2160      	movs	r1, #96	; 0x60
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 faf8 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8003f88:	e01b      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	001a      	movs	r2, r3
 8003f98:	f000 fa8e 	bl	80044b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fae8 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e00b      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	f000 fadf 	bl	8004578 <TIM_ITRx_SetConfig>
        break;
 8003fba:	e002      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	e000      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003fc0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	223d      	movs	r2, #61	; 0x3d
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223c      	movs	r2, #60	; 0x3c
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	ffff00ff 	.word	0xffff00ff

08003fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <TIM_Base_SetConfig+0xc0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x20>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <TIM_Base_SetConfig+0xc4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2270      	movs	r2, #112	; 0x70
 8004044:	4393      	bics	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <TIM_Base_SetConfig+0xc0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_Base_SetConfig+0xc4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_Base_SetConfig+0xc8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <TIM_Base_SetConfig+0xcc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <TIM_Base_SetConfig+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <TIM_Base_SetConfig+0xd4>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	4393      	bics	r3, r2
 8004092:	001a      	movs	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0xc0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <TIM_Base_SetConfig+0xcc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <TIM_Base_SetConfig+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d103      	bne.n	80040d2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	615a      	str	r2, [r3, #20]
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40002000 	.word	0x40002000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	fffffcff 	.word	0xfffffcff

080040f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	2201      	movs	r2, #1
 8004108:	4393      	bics	r3, r2
 800410a:	001a      	movs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2270      	movs	r2, #112	; 0x70
 8004126:	4393      	bics	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2203      	movs	r2, #3
 800412e:	4393      	bics	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2202      	movs	r2, #2
 8004140:	4393      	bics	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <TIM_OC1_SetConfig+0xe8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC1_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <TIM_OC1_SetConfig+0xec>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC1_SetConfig+0x6e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <TIM_OC1_SetConfig+0xf0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10c      	bne.n	8004180 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2208      	movs	r2, #8
 800416a:	4393      	bics	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2204      	movs	r2, #4
 800417c:	4393      	bics	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <TIM_OC1_SetConfig+0xe8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d007      	beq.n	8004198 <TIM_OC1_SetConfig+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <TIM_OC1_SetConfig+0xec>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_OC1_SetConfig+0xa0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <TIM_OC1_SetConfig+0xf0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d111      	bne.n	80041bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <TIM_OC1_SetConfig+0xf4>)
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <TIM_OC1_SetConfig+0xf8>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	b006      	add	sp, #24
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	fffffeff 	.word	0xfffffeff
 80041f0:	fffffdff 	.word	0xfffffdff

080041f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	2210      	movs	r2, #16
 8004204:	4393      	bics	r3, r2
 8004206:	001a      	movs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <TIM_OC2_SetConfig+0xe0>)
 8004222:	4013      	ands	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <TIM_OC2_SetConfig+0xe4>)
 800422a:	4013      	ands	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2220      	movs	r2, #32
 800423e:	4393      	bics	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <TIM_OC2_SetConfig+0xe8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	4393      	bics	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	4393      	bics	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <TIM_OC2_SetConfig+0xe8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_OC2_SetConfig+0x96>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <TIM_OC2_SetConfig+0xec>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC2_SetConfig+0x96>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <TIM_OC2_SetConfig+0xf0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d113      	bne.n	80042b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <TIM_OC2_SetConfig+0xf4>)
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <TIM_OC2_SetConfig+0xf8>)
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	621a      	str	r2, [r3, #32]
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b006      	add	sp, #24
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	ffff8fff 	.word	0xffff8fff
 80042d8:	fffffcff 	.word	0xfffffcff
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	fffffbff 	.word	0xfffffbff
 80042ec:	fffff7ff 	.word	0xfffff7ff

080042f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a33      	ldr	r2, [pc, #204]	; (80043cc <TIM_OC3_SetConfig+0xdc>)
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2270      	movs	r2, #112	; 0x70
 800431c:	4393      	bics	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2203      	movs	r2, #3
 8004324:	4393      	bics	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <TIM_OC3_SetConfig+0xe0>)
 8004336:	4013      	ands	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <TIM_OC3_SetConfig+0xe4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10d      	bne.n	800436a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <TIM_OC3_SetConfig+0xe8>)
 8004352:	4013      	ands	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <TIM_OC3_SetConfig+0xec>)
 8004366:	4013      	ands	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <TIM_OC3_SetConfig+0xe4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <TIM_OC3_SetConfig+0x92>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <TIM_OC3_SetConfig+0xf0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC3_SetConfig+0x92>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <TIM_OC3_SetConfig+0xf4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d113      	bne.n	80043aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <TIM_OC3_SetConfig+0xf8>)
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <TIM_OC3_SetConfig+0xfc>)
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b006      	add	sp, #24
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	fffffeff 	.word	0xfffffeff
 80043d0:	fffffdff 	.word	0xfffffdff
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	fffff7ff 	.word	0xfffff7ff
 80043dc:	fffffbff 	.word	0xfffffbff
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	ffffefff 	.word	0xffffefff
 80043ec:	ffffdfff 	.word	0xffffdfff

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a26      	ldr	r2, [pc, #152]	; (8004498 <TIM_OC4_SetConfig+0xa8>)
 8004400:	401a      	ands	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a20      	ldr	r2, [pc, #128]	; (800449c <TIM_OC4_SetConfig+0xac>)
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <TIM_OC4_SetConfig+0xb0>)
 8004424:	4013      	ands	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <TIM_OC4_SetConfig+0xb4>)
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC4_SetConfig+0xb8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_OC4_SetConfig+0x70>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC4_SetConfig+0xbc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC4_SetConfig+0x70>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <TIM_OC4_SetConfig+0xc0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <TIM_OC4_SetConfig+0xc4>)
 8004464:	4013      	ands	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b006      	add	sp, #24
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	ffffefff 	.word	0xffffefff
 800449c:	ffff8fff 	.word	0xffff8fff
 80044a0:	fffffcff 	.word	0xfffffcff
 80044a4:	ffffdfff 	.word	0xffffdfff
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	ffffbfff 	.word	0xffffbfff

080044b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4393      	bics	r3, r2
 80044d2:	001a      	movs	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	22f0      	movs	r2, #240	; 0xf0
 80044e2:	4393      	bics	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	220a      	movs	r2, #10
 80044f4:	4393      	bics	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b006      	add	sp, #24
 8004512:	bd80      	pop	{r7, pc}

08004514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	2210      	movs	r2, #16
 8004526:	4393      	bics	r3, r2
 8004528:	001a      	movs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <TIM_TI2_ConfigInputStage+0x60>)
 800453e:	4013      	ands	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	031b      	lsls	r3, r3, #12
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	22a0      	movs	r2, #160	; 0xa0
 8004550:	4393      	bics	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b006      	add	sp, #24
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	ffff0fff 	.word	0xffff0fff

08004578 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2270      	movs	r2, #112	; 0x70
 800458c:	4393      	bics	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	2207      	movs	r2, #7
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b004      	add	sp, #16
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <TIM_ETR_SetConfig+0x3c>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b006      	add	sp, #24
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	ffff00ff 	.word	0xffff00ff

080045ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	223c      	movs	r2, #60	; 0x3c
 80045fa:	5c9b      	ldrb	r3, [r3, r2]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e03c      	b.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223c      	movs	r2, #60	; 0x3c
 8004608:	2101      	movs	r1, #1
 800460a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	223d      	movs	r2, #61	; 0x3d
 8004610:	2102      	movs	r1, #2
 8004612:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2270      	movs	r2, #112	; 0x70
 8004628:	4393      	bics	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0f      	ldr	r2, [pc, #60]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	4393      	bics	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	223d      	movs	r2, #61	; 0x3d
 8004670:	2101      	movs	r1, #1
 8004672:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	223c      	movs	r2, #60	; 0x3c
 8004678:	2100      	movs	r1, #0
 800467a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b004      	add	sp, #16
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400

08004690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	223c      	movs	r2, #60	; 0x3c
 80046a2:	5c9b      	ldrb	r3, [r3, r2]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e03e      	b.n	800472a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223c      	movs	r2, #60	; 0x3c
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	4393      	bics	r3, r2
 80046ba:	001a      	movs	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80046c8:	401a      	ands	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80046d6:	401a      	ands	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80046e4:	401a      	ands	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80046f2:	401a      	ands	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a11      	ldr	r2, [pc, #68]	; (8004744 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004700:	401a      	ands	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800470e:	401a      	ands	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223c      	movs	r2, #60	; 0x3c
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	fffffcff 	.word	0xfffffcff
 8004738:	fffffbff 	.word	0xfffffbff
 800473c:	fffff7ff 	.word	0xfffff7ff
 8004740:	ffffefff 	.word	0xffffefff
 8004744:	ffffdfff 	.word	0xffffdfff
 8004748:	ffffbfff 	.word	0xffffbfff

0800474c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b002      	add	sp, #8
 800476a:	bd80      	pop	{r7, pc}

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	2600      	movs	r6, #0
 8004770:	4d0c      	ldr	r5, [pc, #48]	; (80047a4 <__libc_init_array+0x38>)
 8004772:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004774:	1b64      	subs	r4, r4, r5
 8004776:	10a4      	asrs	r4, r4, #2
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	2600      	movs	r6, #0
 800477e:	f000 f821 	bl	80047c4 <_init>
 8004782:	4d0a      	ldr	r5, [pc, #40]	; (80047ac <__libc_init_array+0x40>)
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <__libc_init_array+0x44>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	00b3      	lsls	r3, r6, #2
 8004792:	58eb      	ldr	r3, [r5, r3]
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	00b3      	lsls	r3, r6, #2
 800479c:	58eb      	ldr	r3, [r5, r3]
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	0800484c 	.word	0x0800484c
 80047a8:	0800484c 	.word	0x0800484c
 80047ac:	0800484c 	.word	0x0800484c
 80047b0:	08004850 	.word	0x08004850

080047b4 <memset>:
 80047b4:	0003      	movs	r3, r0
 80047b6:	1882      	adds	r2, r0, r2
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
